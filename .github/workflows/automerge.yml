name: Auto Merge Bot

on:
  pull_request_target:
    types:
      - labeled
      - opened
      - ready_for_review
      - reopened
      - synchronize
      - unlabeled

jobs:
  manage-auto-merge:
    name: Manage auto-merge state
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Configure auto-merge
        uses: actions/github-script@v7
        with:
          script: |
            const AUTO_MERGE_LABEL = 'automerge';

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pull_number = context.payload.pull_request.number;

            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number });

            const hasLabel = pr.labels.some(
              (label) => label.name?.toLowerCase() === AUTO_MERGE_LABEL
            );

            const disableAutoMerge = async () => {
              if (!pr.auto_merge) {
                core.info('Auto-merge is already disabled.');
                return;
              }

              await github.graphql(
                `mutation ($pullRequestId: ID!) {
                  disablePullRequestAutoMerge(input: { pullRequestId: $pullRequestId }) {
                    clientMutationId
                  }
                }`,
                { pullRequestId: pr.node_id }
              );

              core.notice('Auto-merge disabled for this pull request.');
            };

            if (!hasLabel) {
              core.info('Automerge label not present; ensuring auto-merge is disabled.');
              await disableAutoMerge();
              return;
            }

            if (pr.draft) {
              core.notice('Pull request is still a draft; auto-merge will not be enabled.');
              await disableAutoMerge();
              return;
            }

            if (pr.state !== 'open') {
              core.notice(`Pull request state is "${pr.state}"; auto-merge cannot be enabled.`);
              await disableAutoMerge();
              return;
            }

            if (pr.auto_merge) {
              core.info('Auto-merge already enabled; nothing to do.');
              return;
            }

            await github.graphql(
              `mutation ($pullRequestId: ID!, $mergeMethod: PullRequestMergeMethod!) {
                enablePullRequestAutoMerge(
                  input: { pullRequestId: $pullRequestId, mergeMethod: $mergeMethod }
                ) {
                  pullRequest {
                    autoMergeRequest {
                      enabledAt
                    }
                  }
                }
              }`,
              {
                pullRequestId: pr.node_id,
                mergeMethod: 'SQUASH',
              }
            );

            core.notice('Auto-merge enabled with squash strategy; GitHub will merge once checks pass.');
