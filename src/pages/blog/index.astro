---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const allPosts = (await getCollection('blog')).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const featured = allPosts.find(p => p.data.featured);
const posts = featured ? allPosts.filter(p => p.id !== featured.id) : allPosts;
const tags = Array.from(new Set(allPosts.flatMap(p => p.data.tags))).sort();
const postsPerPage = 4;
const totalPostCount = posts.length + (featured ? 1 : 0);
---
<Layout title="Blog">
  <div class="container">
    <h1>Blog</h1>

    <input id="search" type="search" placeholder="Search articles" />

    <div class="tags">
      {tags.map(tag => <button class="tag" data-tag={tag}>{tag}</button>)}
    </div>

    <p
      id="results-status"
      class="mono"
      role="status"
      aria-live="polite"
      data-empty-message="No posts match the current filters."
    >
      Showing {totalPostCount} {totalPostCount === 1 ? 'post' : 'posts'}.
    </p>

    {featured && (
      <section class="featured">
        <h2 class="mono">Featured</h2>
        <article class="card post-card" data-tags={featured.data.tags.join(',')} data-title={featured.data.title.toLowerCase()} data-description={featured.data.description.toLowerCase()}>
          <div class="label mono">{featured.data.pubDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</div>
          <div>
            <h3><a href={`/blog/${featured.slug}/`}>{featured.data.title}</a></h3>
            <p>{featured.data.description}</p>
            <p class="mono">{featured.data.tags.join(', ')}</p>
          </div>
        </article>
      </section>
    )}

    <div id="posts" class="grid" data-posts-per-page={postsPerPage}>
      {posts.map(post => (
        <article class="card post-card span-6" data-tags={post.data.tags.join(',')} data-title={post.data.title.toLowerCase()} data-description={post.data.description.toLowerCase()}>
          <div class="label mono">{post.data.pubDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</div>
          <div>
            <h3><a href={`/blog/${post.slug}/`}>{post.data.title}</a></h3>
            <p>{post.data.description}</p>
            <p class="mono">{post.data.tags.join(', ')}</p>
          </div>
        </article>
      ))}
    </div>

    <div id="pagination" class="pagination"></div>
  </div>

  <script>
    function init() {
      const postsContainer = document.getElementById('posts');
      if (!postsContainer) return;

      const posts = Array.from(postsContainer.querySelectorAll('.post-card'));
      const featuredSection = document.querySelector('.featured');
      const featuredCard = featuredSection ? featuredSection.querySelector('.post-card') : null;
      const filterableCards = featuredCard ? [...posts, featuredCard] : [...posts];
      const POSTS_PER_PAGE = parseInt(postsContainer.dataset.postsPerPage || '1', 10);
      let currentPage = 1;
      const selectedTags = new Set();

      const searchInput = document.getElementById('search');
      const tagButtons = document.querySelectorAll('.tag');
      const pagination = document.getElementById('pagination');
      const status = document.getElementById('results-status');
      const emptyMessage = status && status.dataset ? status.dataset.emptyMessage || 'No posts found.' : 'No posts found.';

      const searchableCache = new Map(
        filterableCards.map(card => [
          card,
          [card.dataset.title || '', card.dataset.description || '', card.dataset.tags || '']
            .join(' ')
            .toLowerCase(),
        ]),
      );

      function updateFeaturedVisibility() {
        if (!featuredSection || !featuredCard) return;
        featuredSection.hidden = featuredCard.hidden;
      }

      function updateStatus(visiblePostCount) {
        if (!status) return;
        const query = (searchInput ? searchInput.value : '').trim();
        const activeTags = [...selectedTags];
        const featuredVisible = featuredCard && !featuredCard.hidden ? 1 : 0;
        const totalVisible = visiblePostCount + featuredVisible;

        if (totalVisible === 0) {
          status.textContent = emptyMessage;
          return;
        }

        const descriptors = [];
        if (query) descriptors.push(`matching “${query}”`);
        if (activeTags.length) descriptors.push(`tagged ${activeTags.join(', ')}`);

        const suffix = descriptors.length ? ` ${descriptors.join(' and ')}` : '';
        status.textContent = `${totalVisible} ${totalVisible === 1 ? 'post' : 'posts'} found${suffix}.`;
      }

      function filterPosts() {
        const query = (searchInput ? searchInput.value : '').trim().toLowerCase();

        filterableCards.forEach(card => {
          const searchable = searchableCache.get(card) || '';
          const matchesSearch = !query || searchable.includes(query);
          const tags = (card.dataset.tags || '')
            .split(',')
            .map(t => t.trim())
            .filter(Boolean);
          const matchesTags = !selectedTags.size || [...selectedTags].every(tag => tags.includes(tag));
          card.hidden = !(matchesSearch && matchesTags);
        });

        updateFeaturedVisibility();
        currentPage = 1;
        paginate();
      }

      function paginate() {
        const visiblePosts = posts.filter(post => !post.hidden);
        const totalPages = Math.ceil(visiblePosts.length / POSTS_PER_PAGE) || 1;
        const start = (currentPage - 1) * POSTS_PER_PAGE;
        const end = start + POSTS_PER_PAGE;

        posts.forEach(post => {
          post.style.display = post.hidden ? 'none' : '';
        });

        visiblePosts.forEach((post, index) => {
          if (index < start || index >= end) {
            post.style.display = 'none';
          }
        });

        pagination.innerHTML = '';

        if (visiblePosts.length > POSTS_PER_PAGE) {
          for (let i = 1; i <= totalPages; i++) {
            const btn = document.createElement('button');
            btn.type = 'button';
            btn.textContent = String(i);
            btn.className = 'page-btn' + (i === currentPage ? ' active' : '');
            btn.addEventListener('click', () => {
              currentPage = i;
              paginate();
            });
            pagination.appendChild(btn);
          }
        }

        updateStatus(visiblePosts.length);
      }

      if (searchInput) {
        searchInput.addEventListener('input', filterPosts);
      }
      tagButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          const tag = btn.dataset.tag;
          if (!tag) return;
          if (selectedTags.has(tag)) {
            selectedTags.delete(tag);
            btn.classList.remove('active');
            btn.setAttribute('aria-pressed', 'false');
          } else {
            selectedTags.add(tag);
            btn.classList.add('active');
            btn.setAttribute('aria-pressed', 'true');
          }
          filterPosts();
        });
        btn.setAttribute('aria-pressed', 'false');
        btn.setAttribute('type', 'button');
      });

      filterPosts();
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  </script>
</Layout>
