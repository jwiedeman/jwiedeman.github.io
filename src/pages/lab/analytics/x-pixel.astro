---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/analytics-sandbox.css';
---
<Layout title="X Pixel Sandbox">
  <div class="container analytics-sandbox x-sandbox">
    <header class="sandbox-header hairline-bottom">
      <p class="supertitle mono">Analytics Lab / Instrumentation</p>
      <h1>X Pixel Sandbox</h1>
      <p class="intro">
        Explore how the X (Twitter) Pixel instruments on-page interactions. The left column outlines the
        tracking metadata applied to each element, while the console on the right shows the payloads that
        would be transmitted to the X endpoint.
      </p>
      <dl class="sandbox-meta">
        <div>
          <dt>Pixel ID</dt>
          <dd class="mono">TW-XXXXXXXXXX</dd>
        </div>
        <div>
          <dt>Endpoint</dt>
          <dd class="mono">https://ads-api.twitter.com/</dd>
        </div>
      </dl>
    </header>

    <div class="sandbox-grid">
      <section class="sandbox-panel">
        <section class="sandbox-card x-map" aria-labelledby="x-map-heading">
          <h2 id="x-map-heading">Instrumentation overview</h2>
          <p>
            Each interactive element is annotated with <code>data-twq-*</code> attributes so the tracking plan
            is transparent at a glance.
          </p>
          <dl class="x-map__list">
            <div>
              <dt>Primary call-to-action</dt>
              <dd>
                <span class="label">Event</span>
                <code>button_click</code>
              </dd>
              <dd>
                <span class="label">Parameters</span>
                <code>{`{"content_name":"Sandbox CTA","value":1}`}</code>
              </dd>
            </div>
            <div>
              <dt>Strategy consultation CTA</dt>
              <dd>
                <span class="label">Event</span>
                <code>schedule_call</code>
              </dd>
              <dd>
                <span class="label">Parameters</span>
                <code>{`{"content_name":"Strategy Call","value":0}`}</code>
              </dd>
            </div>
            <div>
              <dt>Annotated reference link</dt>
              <dd>
                <span class="label">Event</span>
                <code>link_click</code>
              </dd>
              <dd>
                <span class="label">Parameters</span>
                <code>{`{"destination":"/lab/analytics"}`}</code>
              </dd>
            </div>
            <div>
              <dt>Video milestone</dt>
              <dd>
                <span class="label">Event</span>
                <code>video_progress</code>
              </dd>
              <dd>
                <span class="label">Parameters</span>
                <code>{`{"video_title":"Mission Brief","percent":50}`}</code>
              </dd>
            </div>
            <div>
              <dt>Add to cart</dt>
              <dd>
                <span class="label">Event</span>
                <code>add_to_cart</code>
              </dd>
              <dd>
                <span class="label">Parameters</span>
                <code>{`{"content_ids":["telemetry-kit"],"value":199}`}</code>
              </dd>
            </div>
            <div>
              <dt>Purchase confirmation</dt>
              <dd>
                <span class="label">Event</span>
                <code>purchase</code>
              </dd>
              <dd>
                <span class="label">Parameters</span>
                <code>{`{"order_id":"TW-DEMO-001","value":199}`}</code>
              </dd>
            </div>
            <div>
              <dt>Qualification form submission</dt>
              <dd>
                <span class="label">Event</span>
                <code>form_submit</code>
              </dd>
              <dd>
                <span class="label">Parameters</span>
                <code>{`{"form_name":"interest_capture"}`}</code>
              </dd>
            </div>
          </dl>
        </section>

        <section class="sandbox-card x-interactive" aria-labelledby="x-interactive-heading">
          <h2 id="x-interactive-heading">Interactive elements</h2>
          <p>Trigger an interaction to see a live payload appear in the mock endpoint console.</p>

          <div class="x-interactive__section">
            <h3>High-intent conversions</h3>
            <p class="x-interactive__intro">Hero CTAs and meeting bookings mapped to lead-focused events.</p>
            <div class="x-interactive__actions">
              <button
                id="x-button"
                class="sandbox-action sandbox-element"
                type="button"
                data-twq-event="button_click"
                data-twq-parameters='{"content_name":"Sandbox CTA","value":1,"placement":"hero"}'
              >
                Initiate launch sequence
              </button>
              <button
                class="sandbox-action sandbox-element"
                type="button"
                data-twq-event="schedule_call"
                data-twq-parameters='{"content_name":"Strategy Call","value":0,"mission_window":"Q3"}'
              >
                Schedule strategy call
              </button>
            </div>
          </div>

          <div class="x-interactive__section">
            <h3>Content &amp; navigation</h3>
            <p class="x-interactive__intro">Links and media milestones used for audience building.</p>
            <div class="x-interactive__actions">
              <a
                id="x-link"
                class="sandbox-link sandbox-element"
                href="/lab/analytics"
                data-twq-event="link_click"
                data-twq-parameters='{"destination":"/lab/analytics","link_type":"internal"}'
              >
                View analytics lab index
              </a>
              <button
                class="sandbox-action sandbox-element"
                type="button"
                data-twq-event="video_play"
                data-twq-parameters='{"video_title":"Mission Brief","position":"hero"}'
              >
                Start mission briefing
              </button>
              <button
                class="sandbox-action sandbox-element"
                type="button"
                data-twq-event="video_progress"
                data-twq-parameters='{"video_title":"Mission Brief","percent":50,"seconds":72}'
              >
                Log 50% milestone
              </button>
              <a
                class="sandbox-link sandbox-element"
                href="#"
                data-twq-event="download_manual"
                data-twq-parameters='{"asset":"mission-brief.pdf","content_type":"pdf"}'
              >
                Download mission brief (PDF)
              </a>
            </div>
          </div>

          <div class="x-interactive__section">
            <h3>Commerce funnel</h3>
            <p class="x-interactive__intro">Sequential events that measure product consideration to purchase.</p>
            <div class="x-interactive__actions">
              <button
                class="sandbox-action sandbox-element"
                type="button"
                data-twq-event="add_to_cart"
                data-twq-parameters='{"content_ids":["telemetry-kit"],"content_type":"product","value":199,"currency":"USD"}'
              >
                Add telemetry kit
              </button>
              <button
                class="sandbox-action sandbox-element"
                type="button"
                data-twq-event="begin_checkout"
                data-twq-parameters='{"num_items":1,"value":199,"currency":"USD"}'
              >
                Begin secure checkout
              </button>
              <button
                class="sandbox-action sandbox-element"
                type="button"
                data-twq-event="purchase"
                data-twq-parameters='{"order_id":"TW-DEMO-001","value":199,"currency":"USD","content_ids":["telemetry-kit"]}'
              >
                Log purchase
              </button>
            </div>
          </div>

          <div class="x-interactive__section">
            <h3>Forms &amp; preferences</h3>
            <p class="x-interactive__intro">Lead qualification and newsletter subscriptions.</p>
            <div class="x-interactive__actions x-interactive__actions--column">
              <form
                id="x-form"
                class="sandbox-form sandbox-element sandbox-element--form"
                data-twq-event="form_submit"
                data-twq-parameters='{"form_name":"interest_capture","priority":"hot"}'
              >
                <label for="mission-interest">Mission interest</label>
                <input
                  id="mission-interest"
                  name="mission_interest"
                  type="text"
                  placeholder="Telemetry optimization"
                  required
                />
                <label for="mission-size">Team size</label>
                <select id="mission-size" name="mission_size">
                  <option value="1-10">1-10</option>
                  <option value="11-50">11-50</option>
                  <option value="51+">51+</option>
                </select>
                <button type="submit" class="sandbox-action">Submit signal</button>
              </form>
              <button
                class="sandbox-action sandbox-element"
                type="button"
                data-twq-event="newsletter_signup"
                data-twq-parameters='{"list":"mission-updates","method":"inline","value":0}'
              >
                Record newsletter signup
              </button>
            </div>
          </div>
        </section>
      </section>

      <aside class="sandbox-console x-console" data-console-panel aria-labelledby="x-console-heading">
        <h2 id="x-console-heading">Mock X endpoint payloads</h2>
        <p>
          Payloads below are synthetic representations of what would be transmitted to the X conversion
          endpoint for each interaction.
        </p>
        <div class="sandbox-console__toolbar" role="group" aria-label="X pixel console controls">
          <button type="button" class="console-control" data-console-scroll disabled>Jump to latest</button>
          <button type="button" class="console-control" data-console-clear disabled>Clear console</button>
        </div>
        <div
          class="console-stream"
          data-console-stream
          role="log"
          aria-live="polite"
          tabindex="0"
        >
          <p class="console-empty" data-console-empty>Engage the interface to emit simulated X pixel payloads.</p>
        </div>
      </aside>
    </div>

    <section class="sandbox-snippet" aria-labelledby="x-snippet-heading">
      <h2 id="x-snippet-heading">X Pixel base snippet</h2>
      <p>
        Add the bootstrap script before closing <code>&lt;head&gt;</code> and call <code>twq('config')</code>
        with your pixel ID. This sandbox decorates the queue to expose payloads locally.
      </p>
      <pre class="mono"><code>{`&lt;script&gt;
  !function(e,t,n,s,u,a){
    e.twq||(s=e.twq=function(){
      s.exe ? s.exe.apply(s, arguments) : s.queue.push(arguments);
    }, s.version='1.1', s.queue=[], u=t.createElement(n), u.async=!0,
    u.src='https://static.ads-twitter.com/uwt.js', a=t.getElementsByTagName(n)[0],
    a.parentNode.insertBefore(u,a));
  }(window, document, 'script');
  twq('config', 'TW-XXXXXXXXXX');
&lt;/script&gt;`}</code></pre>
    </section>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      !function(e,t,n,s,u,a){
        e.twq||(s=e.twq=function(){
          s.exe ? s.exe.apply(s, arguments) : s.queue.push(arguments);
        }, s.version='1.1', s.queue=[], u=t.createElement(n), u.async=!0,
        u.src='https://static.ads-twitter.com/uwt.js', a=t.getElementsByTagName(n)[0],
        a.parentNode.insertBefore(u,a));
      }(window, document, 'script');

      const baseTwq = window.twq;

      function createSandboxConsole({ limit = 6 } = {}) {
        const panel = document.querySelector('[data-console-panel]');
        const stream = panel ? panel.querySelector('[data-console-stream]') : null;
        const empty = stream ? stream.querySelector('[data-console-empty]') : null;
        const clearButton = panel ? panel.querySelector('[data-console-clear]') : null;
        const scrollButton = panel ? panel.querySelector('[data-console-scroll]') : null;

        if (!panel || !stream) {
          return null;
        }

        const hideEmpty = () => {
          if (empty) {
            empty.hidden = true;
          }
        };

        const showEmpty = () => {
          if (empty) {
            empty.hidden = false;
          }
        };

        const updateControls = () => {
          const hasEntries = !!stream.querySelector('.console-entry');
          if (clearButton) {
            clearButton.disabled = !hasEntries;
          }
          if (scrollButton) {
            scrollButton.disabled = !hasEntries;
          }
        };

        const focusPanel = () => {
          const rect = panel.getBoundingClientRect();
          const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
          if (!fullyVisible) {
            panel.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        };

        if (clearButton) {
          clearButton.addEventListener('click', () => {
            stream.querySelectorAll('.console-entry').forEach((entry) => entry.remove());
            showEmpty();
            updateControls();
            if (typeof stream.scrollTo === 'function') {
              stream.scrollTo({ top: 0, behavior: 'smooth' });
            } else {
              stream.scrollTop = 0;
            }
            if (typeof stream.focus === 'function') {
              stream.focus();
            }
          });
        }

        if (scrollButton) {
          scrollButton.addEventListener('click', () => {
            focusPanel();
            if (typeof stream.scrollTo === 'function') {
              stream.scrollTo({ top: 0, behavior: 'smooth' });
            } else {
              stream.scrollTop = 0;
            }
          });
        }

        updateControls();

        return {
          append(entry) {
            hideEmpty();
            entry.classList.add('console-entry--recent');
            entry.addEventListener(
              'animationend',
              () => entry.classList.remove('console-entry--recent'),
              { once: true }
            );
            stream.prepend(entry);
            const entries = Array.from(stream.querySelectorAll('.console-entry'));
            if (limit && entries.length > limit) {
              entries.slice(limit).forEach((oldEntry) => oldEntry.remove());
            }
            updateControls();
            if (typeof stream.scrollTo === 'function') {
              stream.scrollTo({ top: 0, behavior: 'smooth' });
            } else {
              stream.scrollTop = 0;
            }
            focusPanel();
          }
        };
      }

      const consoleUI = createSandboxConsole({ limit: 6 });
      const sandboxElements = document.querySelectorAll('.sandbox-element');

      const createConsoleEntry = (type, name, payload) => {
        if (!consoleUI) return;
        const timestamp = new Date();
        const entry = document.createElement('article');
        entry.className = 'console-entry';
        entry.innerHTML = `
          <header class="console-entry__meta">
            <span class="console-entry__method">${type}</span>
            <span>${name}</span>
            <time datetime="${timestamp.toISOString()}">${timestamp.toLocaleTimeString()}</time>
          </header>
          <pre class="console-entry__body">${JSON.stringify(payload, null, 2)}</pre>
        `;
        consoleUI.append(entry);
      };

      const highlightElement = (element) => {
        element.classList.add('sandbox-element--active');
        window.setTimeout(() => element.classList.remove('sandbox-element--active'), 600);
      };

      const decoratedTwq = function(...args) {
        const [type, name, payload = {}] = args;
        if (type === 'config' || type === 'event') {
          createConsoleEntry(type, name, {
            pixelId: 'TW-XXXXXXXXXX',
            timestamp: new Date().toISOString(),
            ...payload
          });
        }
        return baseTwq.apply(this, args);
      };

      Object.assign(decoratedTwq, baseTwq);
      Object.defineProperty(decoratedTwq, 'exe', {
        get() {
          return baseTwq.exe;
        },
        set(value) {
          baseTwq.exe = value;
        }
      });
      window.twq = decoratedTwq;

      twq('config', 'TW-XXXXXXXXXX', { page_category: 'lab_sandbox' });

      const buildPayload = (element) => {
        const { twqParameters } = element.dataset;
        try {
          return twqParameters ? JSON.parse(twqParameters) : {};
        } catch (error) {
          return { note: 'Unable to parse data-twq-parameters value.' };
        }
      };

      sandboxElements.forEach((element) => {
        const eventName = element.dataset.twqEvent;
        if (!eventName) return;

        if (element.tagName === 'FORM') {
          element.addEventListener('submit', (event) => {
            event.preventDefault();
            highlightElement(element);
            twq('event', eventName, {
              ...buildPayload(element),
              form_values: Object.fromEntries(new FormData(element))
            });
          });
          return;
        }

        element.addEventListener('click', (event) => {
          if (element.tagName === 'A') {
            event.preventDefault();
          }
          highlightElement(element);
          twq('event', eventName, buildPayload(element));
        });
      });
    });
  </script>

  <style>
    .x-sandbox .x-map__list {
      margin: 0;
      display: grid;
      gap: var(--space-2);
    }

    .x-sandbox .x-map__list div {
      border-left: 3px solid #7e2522;
      padding-left: var(--space-2);
      display: grid;
      gap: 4px;
    }

    .x-sandbox .x-map__list dt {
      font-weight: 600;
      letter-spacing: 0.06em;
      text-transform: uppercase;
      margin: 0;
    }

    .x-sandbox .x-map__list dd {
      margin: 0;
      display: flex;
      gap: var(--space-1);
      align-items: baseline;
      font-family: var(--font-mono);
      font-size: var(--text-12);
    }

    .x-sandbox .x-map__list .label {
      color: var(--color-muted);
      text-transform: uppercase;
      letter-spacing: 0.08em;
      font-size: var(--text-12);
    }

    .x-sandbox .x-interactive__section {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
    }

    .x-sandbox .x-interactive__section + .x-interactive__section {
      margin-top: var(--space-3);
      padding-top: var(--space-3);
      border-top: 1px solid color-mix(in srgb, var(--color-rule) 60%, transparent);
    }

    .x-sandbox .x-interactive__section h3 {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      font-size: var(--text-16);
    }

    .x-sandbox .x-interactive__intro {
      margin: 0;
      color: var(--color-muted);
      max-width: 68ch;
    }

    .x-sandbox .x-interactive__actions {
      display: grid;
      gap: var(--space-2);
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }

    .x-sandbox .x-interactive__actions--column {
      grid-template-columns: 1fr;
      gap: var(--space-3);
    }

    .x-sandbox .sandbox-element--form {
      gap: var(--space-2);
    }

    .x-sandbox .sandbox-element--form label {
      font-family: var(--font-mono);
      font-size: var(--text-12);
      letter-spacing: 0.08em;
      text-transform: uppercase;
    }

    .x-sandbox .sandbox-element--active {
      box-shadow: 0 0 0 2px rgba(126, 37, 34, 0.25);
      transform: translateY(-2px);
    }
  </style>
</Layout>
