---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/analytics-sandbox.css';
---
<Layout title="Adobe Analytics Sandbox">
  <div class="container analytics-sandbox adobe-sandbox">
    <header class="sandbox-header hairline-bottom">
      <p class="supertitle mono">Analytics Lab / Instrumentation</p>
      <h1>Adobe Analytics Sandbox</h1>
      <p class="intro">
        Explore how AppMeasurement tracking fires across a miniature mission control interface. Engage the
        components on the left and observe the simulated beacon payloads rendered in the console.
      </p>
      <dl class="sandbox-meta">
        <div>
          <dt>Report suite</dt>
          <dd class="mono">jwiedeman.sandbox</dd>
        </div>
        <div>
          <dt>Endpoint</dt>
          <dd class="mono">https://metrics-demo.sc.omtrdc.net/b/ss/.../s</dd>
        </div>
      </dl>
    </header>

    <div class="sandbox-grid">
      <section class="sandbox-panel">
        <article class="sandbox-card adobe-card" aria-labelledby="adobe-cta-title">
          <header>
            <p id="adobe-cta-title" class="sandbox-card__tag mono">linkName: cta:launch-sequence · linkType: o</p>
            <h3>Primary CTA — Launch sequence</h3>
          </header>
          <p>
            Demonstrates a high-priority interaction within mission controls. The payload forwards event,
            prop, eVar, and contextData bindings typical of conversion CTAs.
          </p>
          <dl class="sandbox-card__meta">
            <div>
              <dt>events</dt>
              <dd class="mono">event5</dd>
            </div>
            <div>
              <dt>prop4</dt>
              <dd class="mono">launch:cta</dd>
            </div>
            <div>
              <dt>eVar4</dt>
              <dd class="mono">Launch — Primary</dd>
            </div>
            <div>
              <dt>contextData</dt>
              <dd class="mono">component=mission-controls · priority=primary</dd>
            </div>
          </dl>
          <button
            id="aa-primary-cta"
            class="sandbox-action"
            data-aa-component="mission-controls"
            data-aa-role="primary-cta"
            type="button"
          >
            Initiate launch
          </button>
          <pre class="adobe-code mono">{`s.tl(this, 'o', 'cta:launch-sequence', { events: 'event5', prop4: 'launch:cta', eVar4: 'Launch — Primary', contextData: { component: 'mission-controls', priority: 'primary' } });`}</pre>
        </article>

        <article class="sandbox-card adobe-card" aria-labelledby="adobe-link-title">
          <header>
            <p id="adobe-link-title" class="sandbox-card__tag mono">linkName: nav:telemetry-logs · linkType: o</p>
            <h3>Secondary link — Telemetry logs</h3>
          </header>
          <p>
            Mirrors navigation link tracking with module metadata and contextData to label destination
            hierarchies.
          </p>
          <dl class="sandbox-card__meta">
            <div>
              <dt>events</dt>
              <dd class="mono">event8</dd>
            </div>
            <div>
              <dt>prop6</dt>
              <dd class="mono">nav:telemetry</dd>
            </div>
            <div>
              <dt>eVar6</dt>
              <dd class="mono">Navigation Link</dd>
            </div>
            <div>
              <dt>contextData</dt>
              <dd class="mono">component=global-nav · destination=telemetry</dd>
            </div>
          </dl>
          <a
            id="aa-secondary-link"
            class="sandbox-link"
            href="#"
            data-aa-component="global-nav"
            data-aa-role="secondary-link"
          >
            View telemetry logs
          </a>
          <pre class="adobe-code mono">{`s.tl(this, 'o', 'nav:telemetry-logs', { events: 'event8', prop6: 'nav:telemetry', eVar6: 'Navigation Link', contextData: { component: 'global-nav', destination: 'telemetry' } });`}</pre>
        </article>

        <article class="sandbox-card adobe-card" aria-labelledby="adobe-form-title">
          <header>
            <p id="adobe-form-title" class="sandbox-card__tag mono">linkName: form:telemetry-upload · linkType: o</p>
            <h3>Telemetry upload form</h3>
          </header>
          <p>
            Captures a structured form submission including mission ID and channel selections. Prevents
            default submission so you can inspect the payload inline.
          </p>
          <dl class="sandbox-card__meta">
            <div>
              <dt>events</dt>
              <dd class="mono">event12</dd>
            </div>
            <div>
              <dt>prop9</dt>
              <dd class="mono">form:telemetry</dd>
            </div>
            <div>
              <dt>eVar9</dt>
              <dd class="mono">Telemetry Upload</dd>
            </div>
            <div>
              <dt>contextData</dt>
              <dd class="mono">component=telemetry · submission=form</dd>
            </div>
          </dl>
          <form
            id="aa-telemetry-form"
            class="sandbox-form"
            data-aa-component="telemetry"
            data-aa-role="form"
          >
            <label for="aa-telemetry-id">Mission ID</label>
            <input id="aa-telemetry-id" name="missionId" type="text" placeholder="e.g. apollo-204" required />
            <label for="aa-telemetry-channel">Channel</label>
            <select id="aa-telemetry-channel" name="channel">
              <option value="orbital">Orbital</option>
              <option value="lunar">Lunar</option>
              <option value="deep-space">Deep space</option>
            </select>
            <button class="sandbox-action" type="submit">Upload telemetry packet</button>
          </form>
          <pre class="adobe-code mono">{`s.tl(this, 'o', 'form:telemetry-upload', { events: 'event12', prop9: 'form:telemetry', eVar9: 'Telemetry Upload', contextData: { component: 'telemetry', submission: 'form' } });`}</pre>
        </article>

        <section class="sandbox-card adobe-card adobe-pageview" aria-labelledby="adobe-pageview-title">
          <h2 id="adobe-pageview-title">Page load variables</h2>
          <p>
            Initial <code>s.t()</code> call seeds persistent classification variables for this sandbox view.
            These values frame the report suite, channel, and template metadata.
          </p>
          <ul class="sandbox-list mono">
            <li>pageName = lab:analytics:adobe-analytics</li>
            <li>channel = lab</li>
            <li>eVar1 = Adobe Analytics Sandbox</li>
            <li>prop1 = lab:analytics</li>
            <li>events = event1</li>
            <li>contextData.page.missionPhase = demo</li>
            <li>contextData.page.template = sandbox</li>
          </ul>
          <pre class="adobe-code mono">{`s.t({ pageName: 'lab:analytics:adobe-analytics', channel: 'lab', events: 'event1', prop1: 'lab:analytics', eVar1: 'Adobe Analytics Sandbox', contextData: { 'page.missionPhase': 'demo', 'page.template': 'sandbox' } });`}</pre>
        </section>
      </section>

      <aside class="sandbox-console adobe-console" aria-labelledby="adobe-console-heading">
        <div class="adobe-console__header">
          <h2 id="adobe-console-heading">Beacon payloads</h2>
          <button type="button" class="sandbox-action adobe-reset" data-aa-reset>Clear log</button>
        </div>
        <p>
          Simulated requests to <code class="mono">https://metrics-demo.sc.omtrdc.net/b/ss/jwiedeman.sandbox/1/JS-2.23.0/s</code>.
          Entries render the raw query string along with the structured JSON payload.
        </p>
        <div class="console-stream" data-aa-console role="log" aria-live="polite" aria-relevant="additions">
          <p class="console-empty">Awaiting Adobe Analytics activity…</p>
        </div>
        <noscript>
          <p class="console-empty">Enable JavaScript to observe the simulated beacon output.</p>
        </noscript>
      </aside>
    </div>
  </div>

  <script type="module">
    const consoleWindow = document.querySelector('[data-aa-console]');
    const resetButton = document.querySelector('[data-aa-reset]');
    const endpoint = 'https://metrics-demo.sc.omtrdc.net/b/ss/jwiedeman.sandbox/1/JS-2.23.0/s';

    const removeEmptyState = () => {
      const empty = consoleWindow?.querySelector('.console-empty');
      if (empty) {
        empty.remove();
      }
    };

    const addEmptyState = () => {
      if (!consoleWindow) return;
      if (consoleWindow.querySelector('.console-empty')) {
        return;
      }
      const paragraph = document.createElement('p');
      paragraph.className = 'console-empty';
      paragraph.textContent = 'Awaiting Adobe Analytics activity…';
      consoleWindow.append(paragraph);
    };

    const appendConsoleEntry = (payload) => {
      if (!consoleWindow) return;
      removeEmptyState();

      const entry = document.createElement('article');
      entry.className = 'console-entry';

      const header = document.createElement('div');
      header.className = 'console-entry__meta mono';
      const timestamp = new Date().toLocaleTimeString('en-US', { hour12: false });
      header.textContent = `${timestamp} · ${payload.summary}`;

      const requestBlock = document.createElement('pre');
      requestBlock.className = 'console-entry__body';
      requestBlock.textContent = payload.request;

      const dataBlock = document.createElement('pre');
      dataBlock.className = 'console-entry__body';
      dataBlock.textContent = JSON.stringify(payload.data, null, 2);

      entry.append(header, requestBlock, dataBlock);
      consoleWindow.prepend(entry);

      const maxEntries = 8;
      const entries = consoleWindow.querySelectorAll('.console-entry');
      if (entries.length > maxEntries) {
        entries[entries.length - 1].remove();
      }
    };

    const buildPayload = (linkName, linkType, attributes) => {
      const query = new URLSearchParams({
        AQB: '1',
        AQE: '1',
        pe: linkType,
        pev2: linkName,
        ...attributes,
      });

      return {
        summary: `${linkType.toUpperCase()} · ${linkName}`,
        request: `${endpoint}?${query.toString()}`,
        data: {
          linkName,
          linkType,
          ...attributes,
        },
      };
    };

    const fireLinkTracking = (linkName, linkType, attributes) => {
      const payload = buildPayload(linkName, linkType, attributes);
      appendConsoleEntry(payload);
    };

    const bindingMap = {
      cta: {
        linkName: 'cta:launch-sequence',
        linkType: 'o',
        attributes: {
          events: 'event5',
          prop4: 'launch:cta',
          eVar4: 'Launch — Primary',
          'contextData.component': 'mission-controls',
          'contextData.priority': 'primary',
        },
      },
      nav: {
        linkName: 'nav:telemetry-logs',
        linkType: 'o',
        attributes: {
          events: 'event8',
          prop6: 'nav:telemetry',
          eVar6: 'Navigation Link',
          'contextData.component': 'global-nav',
          'contextData.destination': 'telemetry',
        },
      },
      form: {
        linkName: 'form:telemetry-upload',
        linkType: 'o',
        attributes: {
          events: 'event12',
          prop9: 'form:telemetry',
          eVar9: 'Telemetry Upload',
          'contextData.component': 'telemetry',
          'contextData.submission': 'form',
        },
      },
    };

    document.getElementById('aa-primary-cta')?.addEventListener('click', () => {
      fireLinkTracking(bindingMap.cta.linkName, bindingMap.cta.linkType, bindingMap.cta.attributes);
    });

    document.getElementById('aa-secondary-link')?.addEventListener('click', (event) => {
      event.preventDefault();
      fireLinkTracking(bindingMap.nav.linkName, bindingMap.nav.linkType, bindingMap.nav.attributes);
    });

    document.getElementById('aa-telemetry-form')?.addEventListener('submit', (event) => {
      event.preventDefault();
      fireLinkTracking(bindingMap.form.linkName, bindingMap.form.linkType, bindingMap.form.attributes);
      event.currentTarget.reset();
    });

    resetButton?.addEventListener('click', () => {
      if (!consoleWindow) return;
      consoleWindow.innerHTML = '';
      addEmptyState();
    });

    const pageViewPayload = buildPayload('page:view', 't', {
      events: 'event1',
      pageName: 'lab:analytics:adobe-analytics',
      channel: 'lab',
      prop1: 'lab:analytics',
      eVar1: 'Adobe Analytics Sandbox',
      'contextData.page.missionPhase': 'demo',
      'contextData.page.template': 'sandbox',
    });
    appendConsoleEntry(pageViewPayload);
  </script>

  <style>
    .adobe-sandbox .adobe-card pre.adobe-code {
      margin: 0;
      padding: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      background: rgba(0, 0, 0, 0.04);
      overflow-x: auto;
      font-size: var(--text-12);
      line-height: 1.4;
    }

    .adobe-sandbox .adobe-console {
      gap: var(--space-2);
    }

    .adobe-sandbox .adobe-console__header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: var(--space-2);
    }

    .adobe-sandbox .adobe-reset {
      font-size: var(--text-12);
      letter-spacing: 0.12em;
    }
  </style>
</Layout>
