---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/analytics-sandbox.css';
---
<Layout title="GTM Sandbox">
  <div class="analytics-sandbox gtm-sandbox">
    <header class="sandbox-header hairline-bottom">
      <p class="supertitle mono">Analytics Lab / Instrumentation</p>
      <h1>Google Tag Manager Sandbox</h1>
      <p class="intro">
        Explore how a universal data layer powers Google Tag Manager implementations. The left column
        documents the foundational schema and tracked interface components, while the console on the right
        shows the normalized payloads staged for dispatch.
      </p>
      <dl class="sandbox-meta">
        <div>
          <dt>Container ID</dt>
          <dd class="mono">GTM-XXXXXXX</dd>
        </div>
        <div>
          <dt>Data layer schema</dt>
          <dd class="mono">universal-data-layer/v1</dd>
        </div>
      </dl>
    </header>

    <nav class="sandbox-outline" aria-label="Interaction index">
      <h2 class="sandbox-outline__title">Interaction index</h2>
      <ol class="sandbox-outline__list">
        <li><a href="#gtm-blueprint-heading">Universal data layer blueprint</a></li>
        <li><a href="#gtm-interactive-heading">Interactive tracking map</a></li>
        <li><a href="#gtm-checklist-heading">Deployment checklist</a></li>
        <li><a href="#gtm-console-heading">Mock GTM console</a></li>
        <li><a href="#gtm-snippet-heading">Base GTM container snippet</a></li>
      </ol>
    </nav>

    <div class="sandbox-grid">
      <section class="sandbox-panel">
        <section class="sandbox-card gtm-blueprint" aria-labelledby="gtm-blueprint-heading">
          <h2 id="gtm-blueprint-heading">Universal data layer blueprint</h2>
          <p>
            Capture stable identifiers at the session, user, and page level. Interaction events inherit these
            values so downstream destinations receive fully qualified payloads without redefining schema on
            every tag.
          </p>
          <div class="gtm-blueprint__grid">
            <article class="gtm-blueprint__card">
              <h3>Session context</h3>
              <p>Generated on first visit and persisted until the window closes.</p>
              <pre class="mono">{`
{
  "session": {
    "id": "c2c...",
    "timestamp": "2024-01-01T12:00:00Z",
    "source": "organic"
  }
}`}</pre>
            </article>
            <article class="gtm-blueprint__card">
              <h3>User context</h3>
              <p>Anonymous profile traits that remain stable across views.</p>
              <pre class="mono">{`
{
  "user": {
    "authState": "anonymous",
    "persona": "marketer",
    "role": null
  }
}`}</pre>
            </article>
            <article class="gtm-blueprint__card">
              <h3>Page context</h3>
              <p>Describes the current surface so attribution dimensions stay consistent.</p>
              <pre class="mono">{`
{
  "page": {
    "name": "gtm-sandbox",
    "category": "analytics-lab",
    "language": "en-US"
  }
}`}</pre>
            </article>
          </div>
          <p>
            Each interaction extends this base object with an <code>interaction</code> node describing the
            element, module, and any business values collected at the moment of engagement.
          </p>
        </section>

        <section class="sandbox-card gtm-interactive" aria-labelledby="gtm-interactive-heading">
          <h2 id="gtm-interactive-heading">Interactive tracking map</h2>
          <p>
            Components below surface their <code>data-gtm-*</code> metadata. Activate CTAs, navigation,
            search, media, downloads, consent, and scroll sentinels to see the normalized payload that would
            be pushed into the data layer and forwarded to GTM tags.
          </p>
          <div class="gtm-interactive__grid">
            <article class="gtm-interactive__item">
              <header>
                <h3>Primary CTA</h3>
                <p class="mono">Event: cta_click &middot; Module: gtm-sandbox.cta</p>
              </header>
              <button
                type="button"
                class="sandbox-action gtm-trackable"
                data-gtm-event="cta_click"
                data-gtm-element="Launch Primary CTA"
                data-gtm-module="gtm-sandbox.cta"
                data-gtm-value="primary"
              >
                Initiate launch sequence
              </button>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Reference link</h3>
                <p class="mono">Event: documentation_open &middot; Module: gtm-sandbox.navigation</p>
              </header>
              <a
                href="#"
                class="sandbox-link gtm-trackable"
                data-gtm-event="documentation_open"
                data-gtm-element="Sandbox Documentation Link"
                data-gtm-module="gtm-sandbox.navigation"
                data-gtm-trigger="click"
              >
                View implementation checklist
              </a>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Mission intake form</h3>
                <p class="mono">Event: form_submit &middot; Module: gtm-sandbox.form</p>
              </header>
              <form
                class="sandbox-form gtm-trackable"
                data-gtm-event="form_submit"
                data-gtm-element="Mission Intake Form"
                data-gtm-module="gtm-sandbox.form"
                data-gtm-method="POST"
                data-gtm-trigger="submit"
              >
                <label for="mission-objective">Mission objective</label>
                <input id="mission-objective" name="missionObjective" placeholder="Calibrate telemetry" />
                <button type="submit" class="sandbox-action">Submit request</button>
              </form>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Internal navigation</h3>
                <p class="mono">Event: nav_select &middot; Module: gtm-sandbox.navigation</p>
              </header>
              <p>Captures which top-level destinations visitors explore from the primary nav bar.</p>
              <a
                href="#"
                class="sandbox-link gtm-trackable"
                data-gtm-event="nav_select"
                data-gtm-element="Navigation: Labs Overview"
                data-gtm-module="gtm-sandbox.navigation"
                data-gtm-trigger="click"
                data-gtm-value="labs-overview"
              >
                Open Labs overview
              </a>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Site search</h3>
                <p class="mono">Event: site_search &middot; Module: gtm-sandbox.search</p>
              </header>
              <p>
                Submitting the search form pushes the query string and layout context so downstream destinations can evaluate
                findability.
              </p>
              <form
                class="sandbox-form gtm-trackable"
                data-gtm-event="site_search"
                data-gtm-element="Mission Archive Search"
                data-gtm-module="gtm-sandbox.search"
                data-gtm-trigger="submit"
              >
                <label for="gtm-search-query">Search query</label>
                <input id="gtm-search-query" name="query" placeholder="Orbital telemetry" />
                <button type="submit" class="sandbox-action">Search archive</button>
              </form>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Video milestone</h3>
                <p class="mono">Event: video_milestone &middot; Module: gtm-sandbox.media</p>
              </header>
              <p>
                Media instrumentation emits milestone percentages so analysts can distinguish partial plays from completions.
              </p>
              <button
                type="button"
                class="sandbox-action gtm-trackable"
                data-gtm-event="video_milestone"
                data-gtm-element="Mission Briefing"
                data-gtm-module="gtm-sandbox.media"
                data-gtm-value="50"
              >
                Log 50% progress
              </button>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Spec download</h3>
                <p class="mono">Event: file_download &middot; Module: gtm-sandbox.documents</p>
              </header>
              <p>Document downloads feed both conversion and product health dashboards.</p>
              <a
                href="#"
                class="sandbox-link gtm-trackable"
                data-gtm-event="file_download"
                data-gtm-element="Telemetry Kit PDF"
                data-gtm-module="gtm-sandbox.documents"
                data-gtm-value="mission-telemetry-kit.pdf"
              >
                Download telemetry kit (PDF)
              </a>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Consent toggle</h3>
                <p class="mono">Event: consent_update &middot; Module: gtm-sandbox.privacy</p>
              </header>
              <p>Change events record whether optional telemetry communications are enabled.</p>
              <label class="sandbox-form">
                <span class="mono">Email updates</span>
                <input
                  type="checkbox"
                  class="gtm-trackable"
                  data-gtm-event="consent_update"
                  data-gtm-element="Email Updates Opt-in"
                  data-gtm-module="gtm-sandbox.privacy"
                  data-gtm-trigger="change"
                  data-gtm-dynamic="state"
                  value="marketing"
                  checked
                />
              </label>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Scroll sentinel</h3>
                <p class="mono">Event: scroll_depth &middot; Module: gtm-sandbox.scroll</p>
              </header>
              <p>
                A sentinel anchored near the footer fires when 90% depth is reached, mirroring a common scroll-depth trigger.
              </p>
              <div
                class="gtm-scroll-sentinel"
                data-gtm-scroll
                data-gtm-event="scroll_depth"
                data-gtm-element="Footer sentinel"
                data-gtm-module="gtm-sandbox.scroll"
                data-gtm-trigger="observe"
                data-gtm-value="0.9"
              >
                Scroll depth sentinel (90%)
              </div>
            </article>
            <article class="gtm-interactive__item">
              <header>
                <h3>Mission alert modal</h3>
                <p class="mono">Event: modal_open &middot; Module: gtm-sandbox.modal</p>
              </header>
              <p>
                Surface overlay interactions alongside dismiss and acknowledge actions. The helper below opens the modal and
                logs subsequent button clicks inside the dialog.
              </p>
              <button
                type="button"
                id="gtm-modal-launch"
                class="sandbox-action gtm-trackable"
                data-gtm-event="modal_open"
                data-gtm-element="Mission Alert Modal"
                data-gtm-module="gtm-sandbox.modal"
                data-gtm-trigger="click"
                data-gtm-modal-target="gtm-alert-modal"
                data-gtm-feedback="gtm-modal-status"
              >
                Launch mission alert
              </button>
              <p id="gtm-modal-status" class="gtm-status">Modal idle — closed.</p>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Telemetry FAQ accordion</h3>
                <p class="mono">Event: accordion_toggle &middot; Module: gtm-sandbox.content</p>
              </header>
              <p>
                Toggle the accordion to pass along the open or closed state. This pattern helps quantify which FAQ items draw
                the most attention.
              </p>
              <button
                type="button"
                class="sandbox-action gtm-trackable"
                aria-expanded="false"
                aria-controls="gtm-accordion-panel"
                data-gtm-event="accordion_toggle"
                data-gtm-element="Telemetry FAQ Accordion"
                data-gtm-module="gtm-sandbox.content"
                data-gtm-trigger="click"
                data-gtm-dynamic="accordion"
                data-gtm-feedback="gtm-accordion-status"
              >
                Toggle telemetry FAQ
              </button>
              <div id="gtm-accordion-panel" class="gtm-accordion" hidden>
                <h4>Telemetry diagnostics</h4>
                <p>Store-and-forward telemetry should clear within 90 seconds of uplink.</p>
                <h4>Sensor jitter</h4>
                <p>Run the jitter mitigation checklist before reprocessing sensor batches.</p>
              </div>
              <p id="gtm-accordion-status" class="gtm-status">Accordion collapsed.</p>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Inline tooltip</h3>
                <p class="mono">Event: tooltip_toggle &middot; Module: gtm-sandbox.content</p>
              </header>
              <p>
                Track contextual help reveals. Each toggle records whether the tooltip is visible so you can understand which
                helper text assists operators.
              </p>
              <button
                type="button"
                class="sandbox-action gtm-trackable"
                aria-pressed="false"
                aria-controls="gtm-tooltip-panel"
                data-gtm-event="tooltip_toggle"
                data-gtm-element="Inline Tooltip"
                data-gtm-module="gtm-sandbox.content"
                data-gtm-trigger="click"
                data-gtm-dynamic="tooltip"
                data-gtm-feedback="gtm-tooltip-status"
              >
                Toggle tooling primer
              </button>
              <div id="gtm-tooltip-panel" class="gtm-tooltip" hidden>
                <p>The primer outlines script injection order, consent gating, and QA tips.</p>
              </div>
              <p id="gtm-tooltip-status" class="gtm-status">Tooltip hidden.</p>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Copy mission brief</h3>
                <p class="mono">Event: share_link &middot; Module: gtm-sandbox.sharing</p>
              </header>
              <p>
                Copying a link emits a sharing payload with method <code>copy</code>. The helper below mirrors the clipboard
                instrumentation typically wired through a GTM custom HTML tag.
              </p>
              <button
                type="button"
                class="sandbox-action gtm-trackable"
                data-gtm-event="share_link"
                data-gtm-element="Copy Mission Brief"
                data-gtm-module="gtm-sandbox.sharing"
                data-gtm-trigger="click"
                data-gtm-dynamic="copy"
                data-gtm-copy="https://intranet.example/missions/briefing-01"
                data-gtm-feedback="gtm-copy-status"
              >
                Copy mission brief link
              </button>
              <p id="gtm-copy-status" class="gtm-status">No copy attempts recorded.</p>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Theme preference</h3>
                <p class="mono">Event: preference_update &middot; Module: gtm-sandbox.preferences</p>
              </header>
              <p>
                Theme toggles update the preview tile and push the new state into the data layer for downstream personalisation
                logic.
              </p>
              <div id="gtm-theme-preview" class="gtm-theme" data-theme="light">
                <p class="gtm-theme__label">Current theme: <span data-theme-label>Light</span></p>
              </div>
              <button
                type="button"
                class="sandbox-action gtm-trackable"
                data-gtm-event="preference_update"
                data-gtm-element="Theme Toggle"
                data-gtm-module="gtm-sandbox.preferences"
                data-gtm-trigger="click"
                data-gtm-dynamic="toggle"
                data-gtm-toggle-target="gtm-theme-preview"
                data-gtm-feedback="gtm-theme-status"
              >
                Toggle interface theme
              </button>
              <p id="gtm-theme-status" class="gtm-status">Theme set to light.</p>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Tutorial milestones</h3>
                <p class="mono">Events: tutorial_begin / tutorial_complete</p>
              </header>
              <p>
                Log onboarding progress for operators. Each button maps to a dedicated event so analytics teams can monitor
                completion rates.
              </p>
              <div class="gtm-stepper" data-gtm-stepper data-gtm-total-steps="3">
                <ol class="gtm-stepper__list" data-gtm-stepper-track>
                  <li class="gtm-stepper__item" data-step="1">Begin orientation</li>
                  <li class="gtm-stepper__item" data-step="2">Review tagging plan</li>
                  <li class="gtm-stepper__item" data-step="3">Complete readiness</li>
                </ol>
                <div class="gtm-stepper__actions">
                  <button
                    type="button"
                    class="sandbox-action gtm-trackable"
                    data-gtm-event="tutorial_begin"
                    data-gtm-element="Tutorial Begin"
                    data-gtm-module="gtm-sandbox.tutorial"
                    data-gtm-trigger="click"
                    data-gtm-dynamic="step"
                    data-gtm-step="1"
                    data-gtm-step-label="Begin orientation"
                    data-gtm-feedback="gtm-tutorial-status"
                  >
                    Begin orientation
                  </button>
                  <button
                    type="button"
                    class="sandbox-action gtm-trackable"
                    data-gtm-event="tutorial_step"
                    data-gtm-element="Tutorial Midpoint"
                    data-gtm-module="gtm-sandbox.tutorial"
                    data-gtm-trigger="click"
                    data-gtm-dynamic="step"
                    data-gtm-step="2"
                    data-gtm-step-label="Instrumentation review"
                    data-gtm-feedback="gtm-tutorial-status"
                  >
                    Log midpoint
                  </button>
                  <button
                    type="button"
                    class="sandbox-action gtm-trackable"
                    data-gtm-event="tutorial_complete"
                    data-gtm-element="Tutorial Complete"
                    data-gtm-module="gtm-sandbox.tutorial"
                    data-gtm-trigger="click"
                    data-gtm-dynamic="step"
                    data-gtm-step="3"
                    data-gtm-step-label="Complete readiness"
                    data-gtm-feedback="gtm-tutorial-status"
                  >
                    Complete tutorial
                  </button>
                </div>
              </div>
              <p id="gtm-tutorial-status" class="gtm-status">No tutorial milestones logged.</p>
            </article>
          </div>
        </section>

        <div
          id="gtm-alert-modal"
          class="gtm-modal"
          data-gtm-modal
          data-gtm-modal-feedback="gtm-modal-status"
          role="dialog"
          aria-modal="true"
          aria-labelledby="gtm-alert-title"
          aria-describedby="gtm-alert-body"
          hidden
          aria-hidden="true"
        >
          <div class="gtm-modal__dialog">
            <header class="gtm-modal__header">
              <h2 id="gtm-alert-title">Mission readiness alert</h2>
            </header>
            <div class="gtm-modal__body" id="gtm-alert-body">
              <p>
                Mission queue latency has exceeded the safe threshold. Confirm acknowledgement or dismiss the notice to mirror
                standard modal tracking.
              </p>
            </div>
            <footer class="gtm-modal__actions">
              <button
                type="button"
                class="sandbox-action gtm-trackable"
                data-gtm-event="modal_dismiss"
                data-gtm-element="Dismiss Alert"
                data-gtm-module="gtm-sandbox.modal"
                data-gtm-trigger="click"
                data-gtm-modal-close="true"
                data-gtm-feedback="gtm-modal-status"
              >
                Dismiss alert
              </button>
              <button
                type="button"
                class="sandbox-action gtm-trackable"
                data-gtm-event="modal_acknowledge"
                data-gtm-element="Acknowledge Alert"
                data-gtm-module="gtm-sandbox.modal"
                data-gtm-trigger="click"
                data-gtm-modal-close="true"
                data-gtm-feedback="gtm-modal-status"
              >
                Acknowledge alert
              </button>
            </footer>
          </div>
        </div>

        <section class="sandbox-card gtm-checklist" aria-labelledby="gtm-checklist-heading">
          <h2 id="gtm-checklist-heading">Deployment checklist</h2>
          <ol class="gtm-checklist__list">
            <li><strong>1.</strong> Publish the schema and confirm all stakeholders align on naming.</li>
            <li><strong>2.</strong> Populate session, user, and page objects server-side or on first paint.</li>
            <li><strong>3.</strong> Annotate interactive elements with <code>data-gtm-*</code> attributes.</li>
            <li><strong>4.</strong> Use a helper to map DOM metadata to structured data layer pushes.</li>
            <li><strong>5.</strong> Route payloads to GA4, ad pixels, or custom webhooks from within GTM.</li>
            <li><strong>6.</strong> Validate media milestones, consent toggles, and scroll depth in preview mode.</li>
          </ol>
        </section>
      </section>

      <aside class="sandbox-console" data-console-panel aria-labelledby="gtm-console-heading">
        <h2 id="gtm-console-heading">Mock GTM console</h2>
        <p>
          Mirrors the latest <code>dataLayer.push</code> entries and the staged network request. Entries are
          trimmed to the eight most recent interactions.
        </p>
        <div class="sandbox-console__toolbar" role="group" aria-label="GTM console controls">
          <button type="button" class="console-control" data-console-scroll disabled>Jump to latest</button>
          <button type="button" class="console-control" data-console-clear disabled>Clear console</button>
        </div>
        <div
          class="console-stream"
          data-console-stream
          aria-live="polite"
          role="log"
          tabindex="0"
        >
          <p class="console-empty" data-console-empty>No events yet. Trigger an interaction to populate the console.</p>
        </div>
      </aside>
    </div>

    <section class="sandbox-snippet" aria-labelledby="gtm-snippet-heading">
      <h2 id="gtm-snippet-heading">Base GTM container snippet</h2>
      <p>
        Paste the standard bootstrap near the top of <code>&lt;head&gt;</code> and mirror the
        <code>&lt;noscript&gt;</code> iframe immediately after <code>&lt;body&gt;</code>. Replace the container ID
        with your own value.
      </p>
      <pre class="mono"><code>{`&lt;script&gt;
  (function(w,d,s,l,i){
    w[l]=w[l]||[];
    w[l].push({
      'gtm.start': new Date().getTime(),
      event: 'gtm.js'
    });
    var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),
      dl=l!='dataLayer'? '&amp;l='+l : '';
    j.async=true;
    j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;
    f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-XXXXXXX');
&lt;/script&gt;
&lt;noscript&gt;
  &lt;iframe src="https://www.googletagmanager.com/ns.html?id=GTM-XXXXXXX" height="0" width="0" style="display:none;visibility:hidden"&gt;&lt;/iframe&gt;
&lt;/noscript&gt;`}</code></pre>
    </section>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const dataLayer = window.dataLayer || [];
      window.dataLayer = dataLayer;
      const MAX_ITEMS = 8;

      let activeModal = null;

      const formatTimestamp = () => new Date().toLocaleTimeString();

      const updateFeedback = (id, message) => {
        if (!id) {
          return;
        }
        const target = document.getElementById(id);
        if (target) {
          target.textContent = message;
        }
      };

      const findModal = (id) => (id ? document.getElementById(id) : null);

      const openModal = (modal, trigger) => {
        if (!modal) {
          return;
        }
        modal.hidden = false;
        modal.setAttribute('aria-hidden', 'false');
        modal.classList.add('gtm-modal--visible');
        if (trigger && trigger.id) {
          modal.dataset.returnFocus = trigger.id;
        }
        activeModal = modal;
        const focusTarget = modal.querySelector('[data-gtm-modal-close]') || modal.querySelector('button');
        if (focusTarget && typeof focusTarget.focus === 'function') {
          focusTarget.focus();
        }
      };

      const closeModal = (modal) => {
        if (!modal) {
          return;
        }
        modal.hidden = true;
        modal.setAttribute('aria-hidden', 'true');
        modal.classList.remove('gtm-modal--visible');
        if (activeModal === modal) {
          activeModal = null;
        }
        if (modal.dataset.returnFocus) {
          const returnNode = document.getElementById(modal.dataset.returnFocus);
          if (returnNode && typeof returnNode.focus === 'function') {
            returnNode.focus();
          }
          delete modal.dataset.returnFocus;
        }
      };

      function createSandboxConsole({ limit = MAX_ITEMS } = {}) {
        const panel = document.querySelector('[data-console-panel]');
        const stream = panel ? panel.querySelector('[data-console-stream]') : null;
        const empty = stream ? stream.querySelector('[data-console-empty]') : null;
        const clearButton = panel ? panel.querySelector('[data-console-clear]') : null;
        const scrollButton = panel ? panel.querySelector('[data-console-scroll]') : null;

        if (!panel || !stream) {
          return null;
        }

        const hideEmpty = () => {
          if (empty) {
            empty.hidden = true;
          }
        };

        const showEmpty = () => {
          if (empty) {
            empty.hidden = false;
          }
        };

        const updateControls = () => {
          const hasEntries = !!stream.querySelector('.console-entry');
          if (clearButton) {
            clearButton.disabled = !hasEntries;
          }
          if (scrollButton) {
            scrollButton.disabled = !hasEntries;
          }
        };

        const focusPanel = () => {
          const rect = panel.getBoundingClientRect();
          const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
          if (!fullyVisible) {
            panel.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        };

        if (clearButton) {
          clearButton.addEventListener('click', () => {
            stream.querySelectorAll('.console-entry').forEach((entry) => entry.remove());
            showEmpty();
            updateControls();
            if (typeof stream.scrollTo === 'function') {
              stream.scrollTo({ top: 0, behavior: 'smooth' });
            } else {
              stream.scrollTop = 0;
            }
            if (typeof stream.focus === 'function') {
              stream.focus();
            }
          });
        }

        if (scrollButton) {
          scrollButton.addEventListener('click', () => {
            focusPanel();
            if (typeof stream.scrollTo === 'function') {
              stream.scrollTo({ top: 0, behavior: 'smooth' });
            } else {
              stream.scrollTop = 0;
            }
          });
        }

        updateControls();

        return {
          append(entry) {
            hideEmpty();
            entry.classList.add('console-entry--recent');
            entry.addEventListener(
              'animationend',
              () => entry.classList.remove('console-entry--recent'),
              { once: true }
            );
            stream.prepend(entry);
            const entries = Array.from(stream.querySelectorAll('.console-entry'));
            if (limit && entries.length > limit) {
              entries.slice(limit).forEach((oldEntry) => oldEntry.remove());
            }
            updateControls();
            if (typeof stream.scrollTo === 'function') {
              stream.scrollTo({ top: 0, behavior: 'smooth' });
            } else {
              stream.scrollTop = 0;
            }
            focusPanel();
          }
        };
      }

      const consoleUI = createSandboxConsole({ limit: MAX_ITEMS });

      const baseContext = {
        session: {
          id: 'session-' + Math.random().toString(36).slice(2, 10),
          timestamp: new Date().toISOString(),
          source: 'direct'
        },
        user: {
          authState: 'anonymous',
          persona: 'visitor',
          role: null
        },
        page: {
          name: 'gtm-sandbox',
          category: 'analytics-lab',
          language: document.documentElement.lang || 'en-US'
        }
      };

      const recordTransmission = (type, label, payload) => {
        if (!consoleUI) {
          return;
        }
        const article = document.createElement('article');
        article.className = 'console-entry';
        article.innerHTML = `
          <header class="console-entry__meta">
            <span class="console-entry__method">${type}</span>
            <span>${label}</span>
            <span>${new Date().toLocaleTimeString()}</span>
          </header>
          <pre class="console-entry__body">${JSON.stringify(payload, null, 2)}</pre>
        `;
        consoleUI.append(article);
      };

      const buildPayload = ({ eventName, element, module, value, method, formData }) => ({
        event: eventName,
        schema: 'universal-data-layer/v1',
        session: baseContext.session,
        user: baseContext.user,
        page: baseContext.page,
        interaction: {
          element,
          module,
          value: value ?? null,
          method: method ?? null,
          formData: formData ?? null
        }
      });

      const pushEvent = (detail) => {
        const payload = buildPayload(detail);
        dataLayer.push(payload);
        recordTransmission('dataLayer.push', 'Universal data layer event recorded', payload);
        recordTransmission('mock.gtm.request', 'Payload prepared for GTM endpoint', {
          endpoint: 'https://www.googletagmanager.com/collect',
          body: payload
        });
      };

      const attachListeners = () => {
        const elements = document.querySelectorAll('[data-gtm-event]');
        elements.forEach((node) => {
          const eventName = node.dataset.gtmEvent;
          const fallbackName = node.textContent ? node.textContent.trim() : '';
          const elementName = node.dataset.gtmElement || fallbackName || node.tagName.toLowerCase();
          const moduleName = node.dataset.gtmModule || 'unspecified';
          const value = node.dataset.gtmValue || null;
          const method = node.dataset.gtmMethod || null;
          const trigger = node.dataset.gtmTrigger || (node.tagName === 'FORM' ? 'submit' : 'click');
          const dynamic = node.dataset.gtmDynamic || null;
          const feedbackId = node.dataset.gtmFeedback || null;
          const modalTarget = node.dataset.gtmModalTarget || null;
          const modalClose = node.dataset.gtmModalClose === 'true';
          const copyValue = node.dataset.gtmCopy || null;
          const toggleTarget = node.dataset.gtmToggleTarget || null;

          if (trigger === 'observe') {
            return;
          }

          const handler = (event) => {
            if (trigger === 'click' || trigger === 'submit') {
              event.preventDefault();
            }

            const formData = node instanceof HTMLFormElement
              ? Array.from(new FormData(node).entries()).reduce((acc, [key, val]) => {
                  acc[key] = val;
                  return acc;
                }, {})
              : null;

            let computedValue = value;
            if (dynamic === 'value') {
              const rawValue = node instanceof HTMLInputElement || node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement
                ? node.value
                : value;
              const numeric = Number(rawValue);
              computedValue = Number.isFinite(numeric) ? numeric : rawValue;
            } else if (dynamic === 'state') {
              const preference = node.value || value || 'unspecified';
              computedValue = { preference, granted: node.checked };
            } else if (dynamic === 'accordion') {
              const expanded = node.getAttribute('aria-expanded') === 'true';
              const nextExpanded = !expanded;
              node.setAttribute('aria-expanded', String(nextExpanded));
              const panel = document.getElementById(node.getAttribute('aria-controls'));
              if (panel) {
                panel.hidden = !nextExpanded;
              }
              computedValue = { state: nextExpanded ? 'expanded' : 'collapsed' };
            } else if (dynamic === 'tooltip') {
              const pressed = node.getAttribute('aria-pressed') === 'true';
              const nextPressed = !pressed;
              node.setAttribute('aria-pressed', String(nextPressed));
              const panel = document.getElementById(node.getAttribute('aria-controls'));
              if (panel) {
                panel.hidden = !nextPressed;
              }
              computedValue = { state: nextPressed ? 'visible' : 'hidden' };
            } else if (dynamic === 'toggle') {
              const target = toggleTarget ? document.getElementById(toggleTarget) : null;
              let currentState = node.dataset.gtmToggleState || 'light';
              if (target && target.dataset.theme) {
                currentState = target.dataset.theme;
              }
              const nextState = currentState === 'dark' ? 'light' : 'dark';
              if (target) {
                target.dataset.theme = nextState;
                target.classList.toggle('gtm-theme--dark', nextState === 'dark');
                const label = target.querySelector('[data-theme-label]');
                if (label) {
                  label.textContent = nextState.charAt(0).toUpperCase() + nextState.slice(1);
                }
              }
              node.dataset.gtmToggleState = nextState;
              computedValue = { previous_state: currentState, next_state: nextState };
            } else if (dynamic === 'copy') {
              computedValue = { method: 'copy', url: copyValue };
            } else if (dynamic === 'step') {
              const stepper = node.closest('[data-gtm-stepper]');
              const stepNumber = Number(node.dataset.gtmStep) || 1;
              const fallbackLabel = node.textContent ? node.textContent.trim() : '';
              const stepLabel = node.dataset.gtmStepLabel || fallbackLabel || 'Step';
              const totalSteps = stepper ? Number(stepper.dataset.gtmTotalSteps) || 1 : 1;
              if (stepper) {
                const items = stepper.querySelectorAll('[data-step]');
                items.forEach((item) => {
                  const itemStep = Number(item.dataset.step);
                  if (Number.isFinite(itemStep)) {
                    item.classList.toggle('gtm-stepper__item--complete', itemStep <= stepNumber);
                  }
                });
              }
              computedValue = { step: stepNumber, step_label: stepLabel, step_count: totalSteps };
            }

            pushEvent({
              eventName,
              element: elementName,
              module: moduleName,
              value: computedValue,
              method: method || trigger,
              formData
            });

            if (modalTarget) {
              const modal = findModal(modalTarget);
              openModal(modal, node);
            }

            if (modalClose) {
              const modal = node.closest('[data-gtm-modal]');
              closeModal(modal);
            }

            if (dynamic === 'copy' && copyValue) {
              if (navigator.clipboard && typeof navigator.clipboard.writeText === 'function') {
                navigator.clipboard.writeText(copyValue).catch(() => {});
              }
            }

            const timestamp = formatTimestamp();
            let feedbackMessage = `Event ${eventName} logged at ${timestamp}.`;

            if (dynamic === 'accordion' && computedValue && computedValue.state) {
              feedbackMessage = `Accordion ${computedValue.state} at ${timestamp}.`;
            } else if (dynamic === 'tooltip' && computedValue && computedValue.state) {
              feedbackMessage = `Tooltip ${computedValue.state} at ${timestamp}.`;
            } else if (dynamic === 'toggle' && computedValue) {
              feedbackMessage = `Theme set to ${computedValue.next_state} at ${timestamp}.`;
            } else if (dynamic === 'copy' && copyValue) {
              feedbackMessage = `Copied ${copyValue} at ${timestamp}.`;
            } else if (dynamic === 'step' && computedValue) {
              feedbackMessage = `${computedValue.step_label} logged (step ${computedValue.step}/${computedValue.step_count}) at ${timestamp}.`;
            }

            if (modalTarget) {
              feedbackMessage = `Modal opened at ${timestamp}.`;
            }

            if (modalClose) {
              feedbackMessage = `${eventName.replace('modal_', '').replace('_', ' ')} recorded at ${timestamp}.`;
            }

            if (feedbackId) {
              updateFeedback(feedbackId, feedbackMessage);
            }

            if (node instanceof HTMLFormElement && trigger === 'submit') {
              node.reset();
            }
          };

          node.addEventListener(trigger, handler);
        });
      };

      pushEvent({
        eventName: 'page_view',
        element: 'GTM Sandbox',
        module: 'gtm-sandbox.page',
        value: null,
        method: 'view',
        formData: null
      });

      attachListeners();

      document.querySelectorAll('[data-gtm-modal]').forEach((modal) => {
        modal.addEventListener('click', (event) => {
          if (event.target === modal) {
            closeModal(modal);
            const feedback = modal.dataset.gtmModalFeedback;
            if (feedback) {
              updateFeedback(feedback, `Modal dismissed at ${formatTimestamp()}.`);
            }
          }
        });
      });

      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && activeModal) {
          const modal = activeModal;
          closeModal(modal);
          if (modal && modal.dataset.gtmModalFeedback) {
            updateFeedback(modal.dataset.gtmModalFeedback, `Modal dismissed via Escape at ${formatTimestamp()}.`);
          }
        }
      });

      const scrollSentinel = document.querySelector('[data-gtm-scroll]');
      if (scrollSentinel) {
        const sentinelEvent = scrollSentinel.dataset.gtmEvent || 'scroll_depth';
        const sentinelElement = scrollSentinel.dataset.gtmElement || 'Scroll sentinel';
        const sentinelModule = scrollSentinel.dataset.gtmModule || 'gtm-sandbox.scroll';
        const sentinelValue = scrollSentinel.dataset.gtmValue || null;
        const observer = new IntersectionObserver(
          (entries, obs) => {
            const visible = entries.some((entry) => entry.isIntersecting);
            if (visible) {
              pushEvent({
                eventName: sentinelEvent,
                element: sentinelElement,
                module: sentinelModule,
                value: sentinelValue,
                method: 'observe',
                formData: null
              });
              obs.unobserve(scrollSentinel);
              scrollSentinel.classList.add('gtm-scroll-sentinel--armed');
            }
          },
          { threshold: 1 }
        );

        observer.observe(scrollSentinel);
      }
    });
  </script>

  <style>
    .gtm-sandbox .gtm-blueprint__grid {
      display: grid;
      gap: var(--space-3);
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }

    .gtm-sandbox .gtm-blueprint__card {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.75);
    }

    .gtm-sandbox .gtm-blueprint__card h3 {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
    }

    .gtm-sandbox .gtm-blueprint__card pre {
      margin: 0;
      padding: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      background: rgba(0, 0, 0, 0.04);
      overflow-x: auto;
      font-size: var(--text-12);
      line-height: 1.4;
    }

    .gtm-sandbox .gtm-interactive__grid {
      display: grid;
      gap: var(--space-3);
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    }

    .gtm-sandbox .gtm-interactive__item {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.6);
    }

    .gtm-sandbox .gtm-interactive__item header h3 {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
    }

    .gtm-sandbox .gtm-interactive__item .mono {
      color: var(--color-muted);
      font-size: var(--text-12);
      letter-spacing: 0.1em;
      text-transform: uppercase;
    }

    .gtm-sandbox .gtm-checklist__list {
      margin: 0;
      padding-left: var(--space-3);
      display: grid;
      gap: var(--space-1);
    }

    .gtm-sandbox .gtm-scroll-sentinel {
      border: 1px dashed var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      font-family: var(--font-mono);
      font-size: var(--text-12);
      letter-spacing: 0.08em;
      text-transform: uppercase;
      background: rgba(0, 0, 0, 0.04);
    }

    .gtm-sandbox .gtm-scroll-sentinel--armed {
      border-style: solid;
      background: rgba(187, 133, 55, 0.16);
    }

    .gtm-sandbox .gtm-checklist__list li {
      list-style: none;
      border-left: 3px solid var(--color-rule);
      padding-left: var(--space-2);
    }

    .gtm-sandbox .gtm-checklist__list strong {
      letter-spacing: 0.08em;
      margin-right: var(--space-1);
    }

    .gtm-sandbox .gtm-status {
      margin: 0;
      font-size: var(--text-12);
      color: var(--color-muted);
    }

    .gtm-sandbox .gtm-accordion {
      margin-top: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.55);
      display: grid;
      gap: var(--space-1);
    }

    .gtm-sandbox .gtm-tooltip {
      margin-top: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(0, 0, 0, 0.04);
    }

    .gtm-sandbox .gtm-theme {
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.85);
      transition: background 0.2s ease, color 0.2s ease;
    }

    .gtm-sandbox .gtm-theme--dark {
      background: #181818;
      color: #f3eddf;
    }

    .gtm-sandbox .gtm-theme__label {
      margin: 0;
      font-family: var(--font-mono);
      letter-spacing: 0.08em;
      text-transform: uppercase;
    }

    .gtm-sandbox .gtm-stepper {
      display: grid;
      gap: var(--space-2);
    }

    .gtm-sandbox .gtm-stepper__list {
      margin: 0;
      padding-left: var(--space-3);
      display: grid;
      gap: var(--space-1);
    }

    .gtm-sandbox .gtm-stepper__item {
      position: relative;
      padding-left: var(--space-2);
    }

    .gtm-sandbox .gtm-stepper__item::before {
      content: '○';
      position: absolute;
      left: 0;
      font-family: var(--font-mono);
      color: var(--color-muted);
    }

    .gtm-sandbox .gtm-stepper__item--complete::before {
      content: '●';
      color: var(--color-text);
    }

    .gtm-sandbox .gtm-stepper__actions {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-2);
    }

    .gtm-sandbox .gtm-modal {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: var(--space-4);
      z-index: 30;
    }

    .gtm-sandbox .gtm-modal[hidden] {
      display: none;
    }

    .gtm-sandbox .gtm-modal__dialog {
      background: var(--color-bg);
      color: var(--color-text);
      border-radius: var(--radius-2);
      border: 1px solid var(--color-rule);
      max-width: 420px;
      width: 100%;
      padding: var(--space-3);
      display: grid;
      gap: var(--space-2);
      box-shadow: 0 16px 40px rgba(0, 0, 0, 0.24);
    }

    .gtm-sandbox .gtm-modal__header h2 {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      font-size: var(--text-16);
    }

    .gtm-sandbox .gtm-modal__actions {
      display: flex;
      gap: var(--space-2);
      justify-content: flex-end;
      flex-wrap: wrap;
    }
  </style>
</Layout>
