---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/analytics-sandbox.css';
---
<Layout title="GTM Sandbox">
  <div class="container analytics-sandbox gtm-sandbox">
    <header class="sandbox-header hairline-bottom">
      <p class="supertitle mono">Analytics Lab / Instrumentation</p>
      <h1>Google Tag Manager Sandbox</h1>
      <p class="intro">
        Explore how a universal data layer powers Google Tag Manager implementations. The left column
        documents the foundational schema and tracked interface components, while the console on the right
        shows the normalized payloads staged for dispatch.
      </p>
      <dl class="sandbox-meta">
        <div>
          <dt>Container ID</dt>
          <dd class="mono">GTM-XXXXXXX</dd>
        </div>
        <div>
          <dt>Data layer schema</dt>
          <dd class="mono">universal-data-layer/v1</dd>
        </div>
      </dl>
    </header>

    <div class="sandbox-grid">
      <section class="sandbox-panel">
        <section class="sandbox-card gtm-blueprint" aria-labelledby="gtm-blueprint-heading">
          <h2 id="gtm-blueprint-heading">Universal data layer blueprint</h2>
          <p>
            Capture stable identifiers at the session, user, and page level. Interaction events inherit these
            values so downstream destinations receive fully qualified payloads without redefining schema on
            every tag.
          </p>
          <div class="gtm-blueprint__grid">
            <article class="gtm-blueprint__card">
              <h3>Session context</h3>
              <p>Generated on first visit and persisted until the window closes.</p>
              <pre class="mono">{`
{
  "session": {
    "id": "c2c...",
    "timestamp": "2024-01-01T12:00:00Z",
    "source": "organic"
  }
}`}</pre>
            </article>
            <article class="gtm-blueprint__card">
              <h3>User context</h3>
              <p>Anonymous profile traits that remain stable across views.</p>
              <pre class="mono">{`
{
  "user": {
    "authState": "anonymous",
    "persona": "marketer",
    "role": null
  }
}`}</pre>
            </article>
            <article class="gtm-blueprint__card">
              <h3>Page context</h3>
              <p>Describes the current surface so attribution dimensions stay consistent.</p>
              <pre class="mono">{`
{
  "page": {
    "name": "gtm-sandbox",
    "category": "analytics-lab",
    "language": "en-US"
  }
}`}</pre>
            </article>
          </div>
          <p>
            Each interaction extends this base object with an <code>interaction</code> node describing the
            element, module, and any business values collected at the moment of engagement.
          </p>
        </section>

        <section class="sandbox-card gtm-interactive" aria-labelledby="gtm-interactive-heading">
          <h2 id="gtm-interactive-heading">Interactive tracking map</h2>
          <p>
            Components below surface their <code>data-gtm-*</code> metadata. Activate them to see the
            normalized payload that would be pushed into the data layer and forwarded to GTM tags.
          </p>
          <div class="gtm-interactive__grid">
            <article class="gtm-interactive__item">
              <header>
                <h3>Primary CTA</h3>
                <p class="mono">Event: cta_click &middot; Module: gtm-sandbox.cta</p>
              </header>
              <button
                type="button"
                class="sandbox-action gtm-trackable"
                data-gtm-event="cta_click"
                data-gtm-element="Launch Primary CTA"
                data-gtm-module="gtm-sandbox.cta"
                data-gtm-value="primary"
              >
                Initiate launch sequence
              </button>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Reference link</h3>
                <p class="mono">Event: documentation_open &middot; Module: gtm-sandbox.navigation</p>
              </header>
              <a
                href="#"
                class="sandbox-link gtm-trackable"
                data-gtm-event="documentation_open"
                data-gtm-element="Sandbox Documentation Link"
                data-gtm-module="gtm-sandbox.navigation"
                data-gtm-trigger="click"
              >
                View implementation checklist
              </a>
            </article>

            <article class="gtm-interactive__item">
              <header>
                <h3>Mission intake form</h3>
                <p class="mono">Event: form_submit &middot; Module: gtm-sandbox.form</p>
              </header>
              <form
                class="sandbox-form gtm-trackable"
                data-gtm-event="form_submit"
                data-gtm-element="Mission Intake Form"
                data-gtm-module="gtm-sandbox.form"
                data-gtm-method="POST"
                data-gtm-trigger="submit"
              >
                <label for="mission-objective">Mission objective</label>
                <input id="mission-objective" name="missionObjective" placeholder="Calibrate telemetry" />
                <button type="submit" class="sandbox-action">Submit request</button>
              </form>
            </article>
          </div>
        </section>

        <section class="sandbox-card gtm-checklist" aria-labelledby="gtm-checklist-heading">
          <h2 id="gtm-checklist-heading">Deployment checklist</h2>
          <ol class="gtm-checklist__list">
            <li><strong>1.</strong> Publish the schema and confirm all stakeholders align on naming.</li>
            <li><strong>2.</strong> Populate session, user, and page objects server-side or on first paint.</li>
            <li><strong>3.</strong> Annotate interactive elements with <code>data-gtm-*</code> attributes.</li>
            <li><strong>4.</strong> Use a helper to map DOM metadata to structured data layer pushes.</li>
            <li><strong>5.</strong> Route payloads to GA4, ad pixels, or custom webhooks from within GTM.</li>
          </ol>
        </section>
      </section>

      <aside class="sandbox-console" data-console-panel aria-labelledby="gtm-console-heading">
        <h2 id="gtm-console-heading">Mock GTM console</h2>
        <p>
          Mirrors the latest <code>dataLayer.push</code> entries and the staged network request. Entries are
          trimmed to the eight most recent interactions.
        </p>
        <div class="sandbox-console__toolbar" role="group" aria-label="GTM console controls">
          <button type="button" class="console-control" data-console-scroll disabled>Jump to latest</button>
          <button type="button" class="console-control" data-console-clear disabled>Clear console</button>
        </div>
        <div
          class="console-stream"
          data-console-stream
          aria-live="polite"
          role="log"
          tabindex="0"
        >
          <p class="console-empty" data-console-empty>No events yet. Trigger an interaction to populate the console.</p>
        </div>
      </aside>
    </div>

    <section class="sandbox-snippet" aria-labelledby="gtm-snippet-heading">
      <h2 id="gtm-snippet-heading">Base GTM container snippet</h2>
      <p>
        Paste the standard bootstrap near the top of <code>&lt;head&gt;</code> and mirror the
        <code>&lt;noscript&gt;</code> iframe immediately after <code>&lt;body&gt;</code>. Replace the container ID
        with your own value.
      </p>
      <pre class="mono"><code>{`&lt;script&gt;
  (function(w,d,s,l,i){
    w[l]=w[l]||[];
    w[l].push({
      'gtm.start': new Date().getTime(),
      event: 'gtm.js'
    });
    var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),
      dl=l!='dataLayer'? '&amp;l='+l : '';
    j.async=true;
    j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;
    f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-XXXXXXX');
&lt;/script&gt;
&lt;noscript&gt;
  &lt;iframe src="https://www.googletagmanager.com/ns.html?id=GTM-XXXXXXX" height="0" width="0" style="display:none;visibility:hidden"&gt;&lt;/iframe&gt;
&lt;/noscript&gt;`}</code></pre>
    </section>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const dataLayer = window.dataLayer || [];
      window.dataLayer = dataLayer;
      const MAX_ITEMS = 8;

      function createSandboxConsole({ limit = MAX_ITEMS } = {}) {
        const panel = document.querySelector('[data-console-panel]');
        const stream = panel ? panel.querySelector('[data-console-stream]') : null;
        const empty = stream ? stream.querySelector('[data-console-empty]') : null;
        const clearButton = panel ? panel.querySelector('[data-console-clear]') : null;
        const scrollButton = panel ? panel.querySelector('[data-console-scroll]') : null;

        if (!panel || !stream) {
          return null;
        }

        const hideEmpty = () => {
          if (empty) {
            empty.hidden = true;
          }
        };

        const showEmpty = () => {
          if (empty) {
            empty.hidden = false;
          }
        };

        const updateControls = () => {
          const hasEntries = !!stream.querySelector('.console-entry');
          if (clearButton) {
            clearButton.disabled = !hasEntries;
          }
          if (scrollButton) {
            scrollButton.disabled = !hasEntries;
          }
        };

        const focusPanel = () => {
          const rect = panel.getBoundingClientRect();
          const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
          if (!fullyVisible) {
            panel.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        };

        if (clearButton) {
          clearButton.addEventListener('click', () => {
            stream.querySelectorAll('.console-entry').forEach((entry) => entry.remove());
            showEmpty();
            updateControls();
            if (typeof stream.scrollTo === 'function') {
              stream.scrollTo({ top: 0, behavior: 'smooth' });
            } else {
              stream.scrollTop = 0;
            }
            if (typeof stream.focus === 'function') {
              stream.focus();
            }
          });
        }

        if (scrollButton) {
          scrollButton.addEventListener('click', () => {
            focusPanel();
            if (typeof stream.scrollTo === 'function') {
              stream.scrollTo({ top: 0, behavior: 'smooth' });
            } else {
              stream.scrollTop = 0;
            }
          });
        }

        updateControls();

        return {
          append(entry) {
            hideEmpty();
            entry.classList.add('console-entry--recent');
            entry.addEventListener(
              'animationend',
              () => entry.classList.remove('console-entry--recent'),
              { once: true }
            );
            stream.prepend(entry);
            const entries = Array.from(stream.querySelectorAll('.console-entry'));
            if (limit && entries.length > limit) {
              entries.slice(limit).forEach((oldEntry) => oldEntry.remove());
            }
            updateControls();
            if (typeof stream.scrollTo === 'function') {
              stream.scrollTo({ top: 0, behavior: 'smooth' });
            } else {
              stream.scrollTop = 0;
            }
            focusPanel();
          }
        };
      }

      const consoleUI = createSandboxConsole({ limit: MAX_ITEMS });

      const baseContext = {
        session: {
          id: 'session-' + Math.random().toString(36).slice(2, 10),
          timestamp: new Date().toISOString(),
          source: 'direct'
        },
        user: {
          authState: 'anonymous',
          persona: 'visitor',
          role: null
        },
        page: {
          name: 'gtm-sandbox',
          category: 'analytics-lab',
          language: document.documentElement.lang || 'en-US'
        }
      };

      const recordTransmission = (type, label, payload) => {
        if (!consoleUI) {
          return;
        }
        const article = document.createElement('article');
        article.className = 'console-entry';
        article.innerHTML = `
          <header class="console-entry__meta">
            <span class="console-entry__method">${type}</span>
            <span>${label}</span>
            <span>${new Date().toLocaleTimeString()}</span>
          </header>
          <pre class="console-entry__body">${JSON.stringify(payload, null, 2)}</pre>
        `;
        consoleUI.append(article);
      };

      const buildPayload = ({ eventName, element, module, value, method, formData }) => ({
        event: eventName,
        schema: 'universal-data-layer/v1',
        session: baseContext.session,
        user: baseContext.user,
        page: baseContext.page,
        interaction: {
          element,
          module,
          value: value ?? null,
          method: method ?? null,
          formData: formData ?? null
        }
      });

      const pushEvent = (detail) => {
        const payload = buildPayload(detail);
        dataLayer.push(payload);
        recordTransmission('dataLayer.push', 'Universal data layer event recorded', payload);
        recordTransmission('mock.gtm.request', 'Payload prepared for GTM endpoint', {
          endpoint: 'https://www.googletagmanager.com/collect',
          body: payload
        });
      };

      const attachListeners = () => {
        const elements = document.querySelectorAll('[data-gtm-event]');
        elements.forEach((node) => {
          const eventName = node.dataset.gtmEvent;
          const elementName = node.dataset.gtmElement || node.textContent?.trim() || node.tagName.toLowerCase();
          const moduleName = node.dataset.gtmModule || 'unspecified';
          const value = node.dataset.gtmValue || null;
          const method = node.dataset.gtmMethod || null;
          const trigger = node.dataset.gtmTrigger || (node.tagName === 'FORM' ? 'submit' : 'click');

          const handler = (event) => {
            if (trigger === 'click' || trigger === 'submit') {
              event.preventDefault();
            }

            const formData = node instanceof HTMLFormElement
              ? Array.from(new FormData(node).entries()).reduce((acc, [key, val]) => {
                  acc[key] = val;
                  return acc;
                }, {})
              : null;

            pushEvent({
              eventName,
              element: elementName,
              module: moduleName,
              value,
              method: method || trigger,
              formData
            });

            if (node instanceof HTMLFormElement) {
              node.reset();
            }
          };

          node.addEventListener(trigger, handler);
        });
      };

      pushEvent({
        eventName: 'page_view',
        element: 'GTM Sandbox',
        module: 'gtm-sandbox.page',
        value: null,
        method: 'view',
        formData: null
      });

      attachListeners();
    });
  </script>

  <style>
    .gtm-sandbox .gtm-blueprint__grid {
      display: grid;
      gap: var(--space-3);
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }

    .gtm-sandbox .gtm-blueprint__card {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.75);
    }

    .gtm-sandbox .gtm-blueprint__card h3 {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
    }

    .gtm-sandbox .gtm-blueprint__card pre {
      margin: 0;
      padding: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      background: rgba(0, 0, 0, 0.04);
      overflow-x: auto;
      font-size: var(--text-12);
      line-height: 1.4;
    }

    .gtm-sandbox .gtm-interactive__grid {
      display: grid;
      gap: var(--space-3);
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    }

    .gtm-sandbox .gtm-interactive__item {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.6);
    }

    .gtm-sandbox .gtm-interactive__item header h3 {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
    }

    .gtm-sandbox .gtm-interactive__item .mono {
      color: var(--color-muted);
      font-size: var(--text-12);
      letter-spacing: 0.1em;
      text-transform: uppercase;
    }

    .gtm-sandbox .gtm-checklist__list {
      margin: 0;
      padding-left: var(--space-3);
      display: grid;
      gap: var(--space-1);
    }

    .gtm-sandbox .gtm-checklist__list li {
      list-style: none;
      border-left: 3px solid var(--color-rule);
      padding-left: var(--space-2);
    }

    .gtm-sandbox .gtm-checklist__list strong {
      letter-spacing: 0.08em;
      margin-right: var(--space-1);
    }
  </style>
</Layout>
