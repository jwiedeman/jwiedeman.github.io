---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/analytics-sandbox.css';
---
<Layout title="GA4 Sandbox">
  <div class="container analytics-sandbox ga4-sandbox">
    <header class="sandbox-header hairline-bottom">
      <p class="supertitle mono">Analytics Lab / Instrumentation</p>
      <h1>GA4 Sandbox</h1>
      <p class="intro">
        Explore how Google Analytics 4 tagging attaches to common interface elements. Interact with the
        controls to emit events and watch the mock Measurement Protocol payloads stream into the console on
        the right.
      </p>
      <dl class="sandbox-meta">
        <div>
          <dt>Measurement ID</dt>
          <dd class="mono">G-ABCDE12345</dd>
        </div>
        <div>
          <dt>Endpoint</dt>
          <dd class="mono">https://www.google-analytics.com/mp/collect</dd>
        </div>
      </dl>
    </header>

    <div class="sandbox-grid">
      <section class="sandbox-panel" aria-labelledby="ga4-playground-heading">
        <h2 id="ga4-playground-heading">Tracked interface elements</h2>
        <p class="playground-copy">
          Each card documents the GA4 event name, trigger, and parameters attached to the component. These
          map directly to the <code>gtag('event')</code> calls fired when you engage with the UI.
        </p>

        <article class="sandbox-card tracked-card" data-event="select_content">
          <header>
            <p class="sandbox-card__tag mono">Event: select_content</p>
            <h3>Primary mission CTA</h3>
          </header>
          <p>
            Demonstrates a hero-level call to action capturing content selection. This is a high-intent
            click, so the payload includes metadata describing the hero placement and label text.
          </p>
          <dl class="tracked-definition sandbox-card__meta">
            <div>
              <dt>Trigger</dt>
              <dd>Button click</dd>
            </div>
            <div>
              <dt>Parameters</dt>
              <dd>
                <code>&#123;&quot;content_type&quot;:&quot;hero_cta&quot;,&quot;cta_label&quot;:&quot;Request Mission Brief&quot;&#125;</code>
              </dd>
            </div>
          </dl>
          <button id="ga4-cta" class="sandbox-action">Request mission brief</button>
        </article>

        <article class="sandbox-card tracked-card" data-event="view_promotion">
          <header>
            <p class="sandbox-card__tag mono">Event: view_promotion</p>
            <h3>Research bulletin teaser</h3>
          </header>
          <p>
            Simulates an in-page promotion module. The event communicates the name of the offer and the slot
            in which it appeared so you can evaluate placement performance.
          </p>
          <dl class="tracked-definition sandbox-card__meta">
            <div>
              <dt>Trigger</dt>
              <dd>Link interaction</dd>
            </div>
            <div>
              <dt>Parameters</dt>
              <dd>
                <code>&#123;&quot;promotion_name&quot;:&quot;Orbital Research Bulletin&quot;,&quot;creative_slot&quot;:&quot;right_rail&quot;&#125;</code>
              </dd>
            </div>
          </dl>
          <a id="ga4-promo" class="sandbox-link" href="#">Preview bulletin</a>
        </article>

        <article class="sandbox-card tracked-card" data-event="generate_lead">
          <header>
            <p class="sandbox-card__tag mono">Event: generate_lead</p>
            <h3>Lead qualification form</h3>
          </header>
          <p>
            Captures submissions for a lightweight lead form. The payload returns mission focus data so the
            downstream pipeline can segment follow-up efforts.
          </p>
          <dl class="tracked-definition sandbox-card__meta">
            <div>
              <dt>Trigger</dt>
              <dd>Form submit</dd>
            </div>
            <div>
              <dt>Parameters</dt>
              <dd>
                <code>&#123;&quot;form_id&quot;:&quot;ga4-demo-form&quot;,&quot;mission_focus&quot;:&quot;&#123;input value&#125;&quot;&#125;</code>
              </dd>
            </div>
          </dl>
          <form id="ga4-form" class="sandbox-form tracked-form">
            <label for="ga4-mission">Mission focus</label>
            <input id="ga4-mission" name="mission" type="text" placeholder="Deep space communications" />
            <button type="submit" class="sandbox-action">Transmit mission details</button>
          </form>
        </article>
      </section>

      <aside class="sandbox-console" data-console-panel aria-labelledby="ga4-console-heading">
        <h2 id="ga4-console-heading">Mock GA4 console</h2>
        <p class="console-copy">
          Payloads are formatted to match Measurement Protocol requests. Newest events appear at the top.
        </p>
        <div class="sandbox-console__toolbar" role="group" aria-label="GA4 console controls">
          <button type="button" class="console-control" data-console-scroll disabled>Jump to latest</button>
          <button type="button" class="console-control" data-console-clear disabled>Clear console</button>
        </div>
        <div
          class="console-stream"
          data-console-stream
          aria-live="polite"
          role="log"
          tabindex="0"
        >
          <p class="console-empty" data-console-empty>Interact with the sandbox to emit GA4 traffic.</p>
        </div>
      </aside>
    </div>

    <section class="sandbox-snippet" aria-labelledby="ga4-snippet-heading">
      <h2 id="ga4-snippet-heading">Base instrumentation snippet</h2>
      <p>
        The mock console is powered by the same <code>gtag</code> interface used in production. Replace the
        measurement ID with your own property value when deploying.
      </p>
      <pre class="mono"><code>&lt;script async src="https://www.googletagmanager.com/gtag/js?id=G-ABCDE12345"&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag()&#123;dataLayer.push(arguments);&#125;
  gtag('js', new Date());
  gtag('config', 'G-ABCDE12345');
&lt;/script&gt;</code></pre>
    </section>
  </div>

  <script>
    const measurementId = 'G-ABCDE12345';
    const mockClientId = '555.4242424242';
    const endpoint = 'https://www.google-analytics.com/mp/collect';
    window.dataLayer = window.dataLayer || [];

    function createSandboxConsole({ limit = 12 } = {}) {
      const panel = document.querySelector('[data-console-panel]');
      const stream = panel ? panel.querySelector('[data-console-stream]') : null;
      const empty = stream ? stream.querySelector('[data-console-empty]') : null;
      const clearButton = panel ? panel.querySelector('[data-console-clear]') : null;
      const scrollButton = panel ? panel.querySelector('[data-console-scroll]') : null;

      if (!panel || !stream) {
        return null;
      }

      const hideEmpty = () => {
        if (empty) {
          empty.hidden = true;
        }
      };

      const showEmpty = () => {
        if (empty) {
          empty.hidden = false;
        }
      };

      const updateControls = () => {
        const hasEntries = !!stream.querySelector('.console-entry');
        if (clearButton) {
          clearButton.disabled = !hasEntries;
        }
        if (scrollButton) {
          scrollButton.disabled = !hasEntries;
        }
      };

      const focusPanel = () => {
        const rect = panel.getBoundingClientRect();
        const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
        if (!fullyVisible) {
          panel.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      };

      if (clearButton) {
        clearButton.addEventListener('click', () => {
          stream.querySelectorAll('.console-entry').forEach((entry) => entry.remove());
          showEmpty();
          updateControls();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
          if (typeof stream.focus === 'function') {
            stream.focus();
          }
        });
      }

      if (scrollButton) {
        scrollButton.addEventListener('click', () => {
          focusPanel();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
        });
      }

      updateControls();

      return {
        append(entry) {
          hideEmpty();
          entry.classList.add('console-entry--recent');
          entry.addEventListener(
            'animationend',
            () => entry.classList.remove('console-entry--recent'),
            { once: true }
          );
          stream.prepend(entry);
          const entries = Array.from(stream.querySelectorAll('.console-entry'));
          if (limit && entries.length > limit) {
            entries.slice(limit).forEach((oldEntry) => oldEntry.remove());
          }
          updateControls();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
          focusPanel();
        }
      };
    }

    const consoleUI = createSandboxConsole({ limit: 12 });

    function formatPayload(args) {
      const [command, param1, param2] = args;
      const body = {
        measurement_id: measurementId,
        client_id: mockClientId
      };

      if (command === 'config') {
        body.config = Object.assign({ send_page_view: true }, param2 || {});
      } else if (command === 'event') {
        body.events = [
          {
            name: param1,
            params: param2 || {}
          }
        ];
      } else if (command === 'js') {
        body.command = 'js';
        body.value = param1 instanceof Date ? param1.toISOString() : param1;
      } else {
        body.command = command;
        if (param1 !== undefined) {
          body.value = param1;
        }
        if (param2) {
          body.params = param2;
        }
      }

      return {
        method: 'POST',
        endpoint,
        body,
        preformatted: JSON.stringify(body, null, 2)
      };
    }

    function appendLog(args) {
      if (!consoleUI) {
        return;
      }

      const payload = formatPayload(args);
      const entry = document.createElement('article');
      entry.className = 'console-entry';
      entry.innerHTML = `
        <header class="console-entry__meta">
          <span class="console-entry__method">${payload.method}</span>
          <span class="console-entry__endpoint">${payload.endpoint}</span>
          <span class="console-entry__timestamp">${new Date().toLocaleTimeString()}</span>
        </header>
        <pre class="console-entry__body">${payload.preformatted}</pre>
      `;
      consoleUI.append(entry);
    }

    function gtag() {
      const args = Array.from(arguments);
      window.dataLayer.push(args);
      appendLog(args);
    }

    window.gtag = gtag;

    gtag('js', new Date());
    gtag('config', measurementId, { send_page_view: true, page_title: document.title });

    function trackEvent(name, params) {
      gtag('event', name, params);
    }

    trackEvent('page_view', {
      page_location: window.location.href,
      page_title: document.title
    });

    const ctaButton = document.getElementById('ga4-cta');
    if (ctaButton) {
      ctaButton.addEventListener('click', () => {
        trackEvent('select_content', {
          content_type: 'hero_cta',
          cta_label: 'Request Mission Brief'
        });
      });
    }

    const promoLink = document.getElementById('ga4-promo');
    if (promoLink) {
      promoLink.addEventListener('click', (event) => {
        event.preventDefault();
        trackEvent('view_promotion', {
          promotion_name: 'Orbital Research Bulletin',
          creative_slot: 'right_rail'
        });
      });
    }

    const leadForm = document.getElementById('ga4-form');
    if (leadForm) {
      leadForm.addEventListener('submit', (event) => {
        event.preventDefault();
        const mission = leadForm.querySelector('input[name="mission"]');
        trackEvent('generate_lead', {
          form_id: 'ga4-demo-form',
          mission_focus: mission && mission.value ? mission.value : 'unspecified'
        });
        leadForm.reset();
      });
    }
  </script>

  <style>
    .ga4-sandbox .playground-copy,
    .ga4-sandbox .console-copy {
      margin-top: 0;
      color: var(--color-muted);
    }

    .ga4-sandbox .tracked-card {
      background: rgba(255, 255, 255, 0.5);
    }

    .ga4-sandbox .tracked-definition {
      margin: 0;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: var(--space-2);
    }
  </style>
</Layout>
