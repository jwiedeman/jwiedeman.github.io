---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/analytics-sandbox.css';

const heroCtaParams = {
  content_type: 'hero_cta',
  cta_label: 'Request Mission Brief'
};

const promotionParams = {
  promotion_name: 'Orbital Research Bulletin',
  creative_slot: 'right_rail'
};

const leadFormParams = {
  form_id: 'ga4-demo-form'
};

const navInsightsParams = {
  item_list_id: 'primary_navigation',
  item_list_name: 'Main Navigation',
  item_id: 'nav-insights',
  item_name: 'Insights overview'
};

const searchBaseParams = {
  search_type: 'site',
  results_count: 12
};

const tabParams = {
  telemetry: {
    content_type: 'tab',
    content_id: 'telemetry',
    content_name: 'Telemetry uplink'
  },
  comms: {
    content_type: 'tab',
    content_id: 'communications',
    content_name: 'Deep space comms'
  },
  navigation: {
    content_type: 'tab',
    content_id: 'navigation',
    content_name: 'Orbital navigation'
  }
};

const videoStartParams = {
  video_title: 'Mission Briefing 01',
  video_provider: 'html5',
  video_url: 'https://intranet.example/missions/briefing-01'
};

const videoProgressParams = {
  video_title: 'Mission Briefing 01',
  video_percent: 50,
  video_current_time: 73
};

const videoCompleteParams = {
  video_title: 'Mission Briefing 01',
  video_duration: 146
};

const fileDownloadParams = {
  file_name: 'Mission-Telemetry-Kit.pdf',
  file_extension: 'pdf',
  file_size: 2480
};

const outboundParams = {
  link_url: 'https://www.nasa.gov/',
  link_domain: 'nasa.gov'
};

const telemetryItem = {
  item_id: 'telemetry-module',
  item_name: 'Telemetry Uplink Module',
  item_category: 'Hardware',
  item_category2: 'Communications',
  price: 199,
  quantity: 1
};

const viewItemParams = {
  currency: 'USD',
  value: 199,
  items: [telemetryItem]
};

const addToCartParams = {
  currency: 'USD',
  value: 199,
  items: [telemetryItem]
};

const beginCheckoutParams = {
  currency: 'USD',
  value: 199,
  coupon: 'MISSION10',
  items: [telemetryItem]
};

const purchaseParams = {
  currency: 'USD',
  value: 199,
  transaction_id: 'GA4-DEMO-1',
  tax: 0,
  shipping: 0,
  payment_type: 'wire',
  items: [telemetryItem]
};

const feedbackParams = {
  content_id: 'analytics-lab-prototype',
  content_type: 'lab_module'
};

const chatStartParams = {
  method: 'floating_widget',
  agent: 'virtual_specialist'
};

const exceptionParams = {
  description: 'mission-briefing-timeout',
  fatal: false
};

const scrollDepthParams = {
  percent_scrolled: 90,
  content_group: 'mission-protocols',
  viewport_height: 'desktop'
};

const dragManifestParams = {
  interaction_type: 'drag_drop',
  drop_zone: 'telemetry_console',
  content_type: 'manifest_hand_off'
};

const fileUploadParams = {
  content_type: 'mission_log',
  content_id: 'uplink-diagnostics',
  upload_method: 'manual'
};

const commandPaletteParams = {
  interface: 'command_palette',
  interaction_type: 'hotkey',
  surface: 'keyboard'
};

const formFocusParams = {
  form_id: 'call-sign-intake',
  form_name: 'Call sign capture'
};

const modalViewParams = {
  content_type: 'modal',
  content_id: 'mission-alert',
  content_name: 'Mission readiness alert'
};

const tableSortParams = {
  content_type: 'data_table',
  content_id: 'crew-roster',
  interaction_type: 'sort'
};

const tableFilterParams = {
  content_type: 'data_table',
  content_id: 'crew-roster',
  interaction_type: 'filter_toggle'
};

const inlineEditParams = {
  content_type: 'data_table',
  content_id: 'crew-roster',
  interaction_type: 'inline_edit'
};

const rangeCalibrationParams = {
  control_type: 'range_slider',
  control_id: 'throttle-calibration',
  measurement_unit: 'percent'
};

const colorCalibrationParams = {
  control_type: 'color_picker',
  control_id: 'hull-accent',
  measurement_unit: 'hex'
};

const networkToggleParams = {
  surface: 'environment_monitor',
  interaction_type: 'network_state'
};

const screenModeParams = {
  surface: 'display_mode',
  interaction_type: 'screen_state'
};

const orientationParams = {
  surface: 'device_orientation',
  interaction_type: 'orientation_lock'
};

const geolocationParams = {
  surface: 'geolocation_request',
  interaction_type: 'location_capture'
};

const pwaInstallParams = {
  surface: 'pwa_installation',
  interaction_type: 'install_prompt'
};

const pushConsentParams = {
  surface: 'push_messaging',
  interaction_type: 'permission_request'
};

const backgroundSyncParams = {
  surface: 'background_sync',
  interaction_type: 'sync_enqueue'
};

const modalDismissParams = {
  content_type: 'modal',
  content_id: 'mission-alert',
  interaction_state: 'dismissed'
};

const modalAcknowledgeParams = {
  content_type: 'modal',
  content_id: 'mission-alert',
  interaction_state: 'acknowledged'
};

const accordionParams = {
  content_type: 'accordion',
  content_id: 'faq-telemetry',
  content_name: 'Telemetry operations FAQ'
};

const tooltipParams = {
  content_type: 'tooltip',
  content_id: 'mission-tooling',
  content_name: 'Mission tooling primer'
};

const copyShareParams = {
  method: 'copy',
  content_type: 'mission_brief',
  content_id: 'mission-brief-01',
  content_name: 'Mission brief 01'
};

const socialShareParams = {
  method: 'share',
  medium: 'x',
  content_type: 'mission_brief',
  content_id: 'mission-brief-01',
  content_name: 'Mission brief 01'
};

const printShareParams = {
  method: 'print',
  content_type: 'mission_brief',
  content_id: 'mission-brief-01',
  content_name: 'Mission brief 01'
};

const calendarSelectParams = {
  interface: 'mission_schedule',
  schedule_id: 'mission-window',
  interaction_type: 'calendar_select'
};

const timelineAdjustParams = {
  interface: 'mission_schedule',
  control_type: 'timeline_slider',
  interaction_type: 'timeline_adjust'
};

const timeslotSelectParams = {
  interface: 'mission_schedule',
  schedule_id: 'mission-window',
  interaction_type: 'timeslot_select'
};

const reminderCreateParams = {
  interface: 'mission_schedule',
  interaction_type: 'reminder_set',
  reminder_channel: 'mission_console'
};

const annotationCommentParams = {
  content_type: 'annotation',
  content_id: 'mission-brief-01',
  content_group: 'mission_documents'
};

const annotationStatusParams = {
  content_type: 'annotation',
  content_id: 'mission-brief-01',
  interaction_type: 'status_update'
};

const translationSelectParams = {
  content_type: 'translation',
  content_id: 'mission-brief-01',
  interface: 'document_localization'
};

const themeToggleParams = {
  content_type: 'preference',
  content_id: 'theme',
  content_name: 'Interface theme toggle'
};

const loginParams = {
  method: 'sso',
  screen_name: 'mission_control',
  user_type: 'operator'
};

const signUpParams = {
  method: 'email',
  campaign: 'mission-readiness',
  user_role: 'mission_specialist'
};

const tutorialBaseParams = {
  tutorial_id: 'ga4-orientation',
  tutorial_name: 'GA4 sandbox orientation',
  step_count: 3
};
---
<Layout title="GA4 Sandbox">
  <div class="analytics-sandbox ga4-sandbox">
    <header class="sandbox-header hairline-bottom">
      <p class="supertitle mono">Analytics Lab / Instrumentation</p>
      <h1>GA4 Sandbox</h1>
      <p class="intro">
        Explore how Google Analytics 4 tagging attaches to common interface elements. Interact with the
        controls to emit events and watch the mock Measurement Protocol payloads stream into the console on
        the right.
      </p>
      <dl class="sandbox-meta">
        <div>
          <dt>Measurement ID</dt>
          <dd class="mono">G-ABCDE12345</dd>
        </div>
        <div>
          <dt>Endpoint</dt>
          <dd class="mono">https://www.google-analytics.com/mp/collect</dd>
        </div>
      </dl>
    </header>

    <nav class="sandbox-outline" aria-label="Interaction index">
      <h2 class="sandbox-outline__title">Interaction index</h2>
      <ol class="sandbox-outline__list">
        <li><a href="#mission-actions">Mission-critical actions</a></li>
        <li><a href="#navigation-discovery">Navigation &amp; discovery</a></li>
        <li><a href="#media-docs">Media &amp; documents</a></li>
        <li><a href="#commerce-conversions">Commerce &amp; conversions</a></li>
        <li><a href="#feedback-support">Feedback, consent &amp; support</a></li>
        <li><a href="#interface-overlays">Interface overlays &amp; detail panels</a></li>
        <li><a href="#collaboration-sharing">Collaboration &amp; sharing</a></li>
        <li><a href="#scheduling-timeline">Mission scheduling &amp; timeline</a></li>
        <li><a href="#content-authoring">Document authoring &amp; annotation</a></li>
        <li><a href="#account-guidance">Account &amp; guidance flows</a></li>
        <li><a href="#gestures-advanced">Gestures &amp; advanced inputs</a></li>
        <li><a href="#data-tables">Data tables &amp; inline updates</a></li>
        <li><a href="#analog-controls">Analog controls &amp; calibrations</a></li>
        <li><a href="#environment-signals">Environment &amp; device sensors</a></li>
        <li><a href="#progressive-features">Progressive web features</a></li>
        <li><a href="#scroll-visibility">Scroll &amp; visibility</a></li>
      </ol>
    </nav>

    <div class="sandbox-grid">
      <section class="sandbox-panel" aria-labelledby="ga4-playground-heading">
        <h2 id="ga4-playground-heading">Tracked interface elements</h2>
        <p class="playground-copy">
          Each cluster demonstrates a different surface area of a product experience &mdash; hero CTAs, navigation,
          media, commerce, feedback, and scroll depth. Engage with the controls to emit the matching
          <code>gtag('event')</code> calls and watch the Measurement Protocol payloads stream into the console.
        </p>

        <div class="tracked-group" id="mission-actions">
          <h3 class="tracked-group__title">Mission-critical actions</h3>
          <p class="tracked-group__intro">
            High-value engagements such as hero CTAs, promotions, and form submissions provide the foundation for
            conversion analysis.
          </p>
          <div class="tracked-grid">
            <article class="sandbox-card tracked-card" data-event="select_content">
              <header>
                <p class="sandbox-card__tag mono">Event: select_content</p>
                <h3>Primary mission CTA</h3>
              </header>
              <p>
                Demonstrates a hero-level call to action capturing content selection. The payload returns metadata
                describing the hero placement and label text so you can map journeys to specific modules.
              </p>
              <dl class="tracked-definition sandbox-card__meta">
                <div>
                  <dt>Trigger</dt>
                  <dd>Button click</dd>
                </div>
                <div>
                  <dt>Parameters</dt>
                  <dd>
                    <code>&#123;&quot;content_type&quot;:&quot;hero_cta&quot;,&quot;cta_label&quot;:&quot;Request Mission Brief&quot;&#125;</code>
                  </dd>
                </div>
              </dl>
              <button
                id="ga4-cta"
                class="sandbox-action"
                data-ga4-event="select_content"
                data-ga4-params={JSON.stringify(heroCtaParams)}
              >
                Request mission brief
              </button>
            </article>

            <article class="sandbox-card tracked-card" data-event="view_promotion">
              <header>
                <p class="sandbox-card__tag mono">Event: view_promotion</p>
                <h3>Research bulletin teaser</h3>
              </header>
              <p>
                Simulates an in-page promotion module. The event communicates the name of the offer and the slot in which it
                appeared so you can evaluate placement performance and creative effectiveness.
              </p>
              <dl class="tracked-definition sandbox-card__meta">
                <div>
                  <dt>Trigger</dt>
                  <dd>Link interaction</dd>
                </div>
                <div>
                  <dt>Parameters</dt>
                  <dd>
                    <code>&#123;&quot;promotion_name&quot;:&quot;Orbital Research Bulletin&quot;,&quot;creative_slot&quot;:&quot;right_rail&quot;&#125;</code>
                  </dd>
                </div>
              </dl>
              <a
                id="ga4-promo"
                class="sandbox-link"
                href="#"
                data-ga4-event="view_promotion"
                data-ga4-params={JSON.stringify(promotionParams)}
              >
                Preview bulletin
              </a>
            </article>

            <article class="sandbox-card tracked-card" data-event="generate_lead">
              <header>
                <p class="sandbox-card__tag mono">Event: generate_lead</p>
                <h3>Lead qualification form</h3>
              </header>
              <p>
                Captures submissions for a lightweight lead form. The mission focus value is passed in the payload so sales and
                marketing teams can segment follow-up efforts with precision.
              </p>
              <dl class="tracked-definition sandbox-card__meta">
                <div>
                  <dt>Trigger</dt>
                  <dd>Form submit</dd>
                </div>
                <div>
                  <dt>Parameters</dt>
                  <dd>
                    <code>&#123;&quot;form_id&quot;:&quot;ga4-demo-form&quot;,&quot;mission_focus&quot;:&quot;&#123;input value&#125;&quot;&#125;</code>
                  </dd>
                </div>
              </dl>
              <form
                id="ga4-form"
                class="sandbox-form tracked-form"
                data-ga4-event="generate_lead"
                data-ga4-dynamic="mission"
                data-ga4-params={JSON.stringify(leadFormParams)}
              >
                <label for="ga4-mission">Mission focus</label>
                <input id="ga4-mission" name="mission" type="text" placeholder="Deep space communications" />
                <button type="submit" class="sandbox-action">Transmit mission details</button>
              </form>
            </article>
          </div>
        </div>

        <div class="tracked-group" id="navigation-discovery">
          <h3 class="tracked-group__title">Navigation &amp; discovery</h3>
          <p class="tracked-group__intro">
            Wayfinding, search, and tab patterns help analysts understand how visitors explore dense knowledge bases.
          </p>
          <div class="tracked-grid">
            <article class="sandbox-card tracked-card" data-event="select_item">
              <header>
                <p class="sandbox-card__tag mono">Event: select_item</p>
                <h3>Primary navigation</h3>
              </header>
              <p>
                Track which navigation destinations drive the most engagement. Each link passes item metadata aligned to the
                GA4 recommended ecommerce schema for rich reporting.
              </p>
              <dl class="tracked-definition sandbox-card__meta">
                <div>
                  <dt>Trigger</dt>
                  <dd>Link click</dd>
                </div>
                <div>
                  <dt>Parameters</dt>
                  <dd>
                    <code>
                      &#123;&quot;item_list_id&quot;:&quot;primary_navigation&quot;,&quot;item_list_name&quot;:&quot;Main Navigation&quot;,
                      &quot;item_id&quot;:&quot;nav-insights&quot;,&quot;item_name&quot;:&quot;Insights overview&quot;&#125;
                    </code>
                  </dd>
                </div>
              </dl>
              <nav aria-label="Primary navigation demo" class="tracked-nav">
                <a
                  id="ga4-nav-insights"
                  href="#"
                  class="sandbox-link"
                  data-ga4-event="select_item"
                  data-ga4-params={JSON.stringify(navInsightsParams)}
                >
                  Navigate to Insights
                </a>
              </nav>
            </article>

            <article class="sandbox-card tracked-card" data-event="search">
              <header>
                <p class="sandbox-card__tag mono">Event: search</p>
                <h3>Site search</h3>
              </header>
              <p>
                Capture on-site search terms to illuminate content gaps. The sandbox returns a mock results count to mimic a
                backend response.
              </p>
              <dl class="tracked-definition sandbox-card__meta">
                <div>
                  <dt>Trigger</dt>
                  <dd>Form submit</dd>
                </div>
                <div>
                  <dt>Parameters</dt>
                  <dd>
                    <code>&#123;&quot;search_type&quot;:&quot;site&quot;,&quot;search_term&quot;:&quot;&#123;input value&#125;&quot;&#125;</code>
                  </dd>
                </div>
              </dl>
              <form
                id="ga4-search"
                class="sandbox-form"
                data-ga4-event="search"
                data-ga4-dynamic="search"
                data-ga4-params={JSON.stringify(searchBaseParams)}
              >
                <label for="ga4-search-term">Search query</label>
                <input
                  id="ga4-search-term"
                  name="searchTerm"
                  type="search"
                  placeholder="Telemetry protocol"
                />
                <button type="submit" class="sandbox-action">Query archive</button>
              </form>
            </article>

            <article class="sandbox-card tracked-card" data-event="select_content">
              <header>
                <p class="sandbox-card__tag mono">Event: select_content</p>
                <h3>Tab group</h3>
              </header>
              <p>
                Monitor which knowledge tab resonates most. Selecting a tab updates its pressed state and dispatches a
                <code>select_content</code> event with the tab identifier.
              </p>
              <dl class="tracked-definition sandbox-card__meta">
                <div>
                  <dt>Trigger</dt>
                  <dd>Button click</dd>
                </div>
                <div>
                  <dt>Parameters</dt>
                  <dd>
                    <code>&#123;&quot;content_type&quot;:&quot;tab&quot;,&quot;content_id&quot;:&quot;telemetry&quot;&#125;</code>
                  </dd>
                </div>
              </dl>
              <div class="tracked-tabs" role="tablist" data-ga4-tab-group>
                <button
                  type="button"
                  class="sandbox-action"
                  role="tab"
                  aria-pressed="true"
                  data-ga4-event="select_content"
                  data-ga4-dynamic="tab"
                  data-ga4-tab="telemetry"
                  data-ga4-params={JSON.stringify(tabParams.telemetry)}
                >
                  Telemetry
                </button>
                <button
                  type="button"
                  class="sandbox-action"
                  role="tab"
                  aria-pressed="false"
                  data-ga4-event="select_content"
                  data-ga4-dynamic="tab"
                  data-ga4-tab="communications"
                  data-ga4-params={JSON.stringify(tabParams.comms)}
                >
                  Communications
                </button>
                <button
                  type="button"
                  class="sandbox-action"
                  role="tab"
                  aria-pressed="false"
                  data-ga4-event="select_content"
                  data-ga4-dynamic="tab"
                  data-ga4-tab="navigation"
                  data-ga4-params={JSON.stringify(tabParams.navigation)}
                >
                  Navigation
                </button>
              </div>
            </article>
          </div>
        </div>

        <div class="tracked-group" id="media-docs">
          <h3 class="tracked-group__title">Media &amp; documents</h3>
          <p class="tracked-group__intro">
            Streaming events, downloads, and outbound clicks provide a feedback loop for long-form content strategy.
          </p>
          <div class="tracked-grid">
            <article class="sandbox-card tracked-card" data-event="video_start">
              <header>
                <p class="sandbox-card__tag mono">Event: video_start</p>
                <h3>Mission briefing playback</h3>
              </header>
              <p>
                Buttons below mirror the instrumentation normally attached to embedded video players. Trigger start, midpoint,
                and completion milestones to validate media tracking.
              </p>
              <div class="tracked-video-controls">
                <button
                  type="button"
                  class="sandbox-action"
                  data-ga4-event="video_start"
                  data-ga4-params={JSON.stringify(videoStartParams)}
                >
                  Start briefing
                </button>
                <button
                  type="button"
                  class="sandbox-action"
                  data-ga4-event="video_progress"
                  data-ga4-params={JSON.stringify(videoProgressParams)}
                >
                  Hit 50% progress
                </button>
                <button
                  type="button"
                  class="sandbox-action"
                  data-ga4-event="video_complete"
                  data-ga4-params={JSON.stringify(videoCompleteParams)}
                >
                  Complete playback
                </button>
              </div>
            </article>

            <article class="sandbox-card tracked-card" data-event="file_download">
              <header>
                <p class="sandbox-card__tag mono">Event: file_download</p>
                <h3>Spec sheet download</h3>
              </header>
              <p>
                Measure gated content performance by sending file metadata alongside the event. This example mirrors how a PDF
                asset download would be captured.
              </p>
              <a
                id="ga4-download"
                href="#"
                class="sandbox-link"
                data-ga4-event="file_download"
                data-ga4-params={JSON.stringify(fileDownloadParams)}
              >
                Download telemetry kit (PDF)
              </a>
            </article>

            <article class="sandbox-card tracked-card" data-event="click">
              <header>
                <p class="sandbox-card__tag mono">Event: click</p>
                <h3>Outbound link</h3>
              </header>
              <p>
                Outbound link instrumentation captures the destination URL and domain, allowing analysts to monitor partner
                referrals.
              </p>
              <a
                id="ga4-outbound"
                href="https://www.nasa.gov/"
                class="sandbox-link"
                rel="noreferrer noopener"
                data-ga4-event="click"
                data-ga4-params={JSON.stringify(outboundParams)}
              >
                Visit nasa.gov
              </a>
            </article>
          </div>
        </div>

        <div class="tracked-group" id="commerce-conversions">
          <h3 class="tracked-group__title">Commerce &amp; conversions</h3>
          <p class="tracked-group__intro">
            Ecommerce payloads maintain parity with GA4 retail schemas so merchandising teams can stitch together intent,
            checkout, and fulfillment.
          </p>
          <div class="tracked-grid">
            <article class="sandbox-card tracked-card" data-event="view_item">
              <header>
                <p class="sandbox-card__tag mono">Event: view_item</p>
                <h3>Product detail view</h3>
              </header>
              <p>
                Register when a user inspects a hardware module. This primes downstream add-to-cart and checkout events with
                the same item payload for cohesive reporting.
              </p>
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="view_item"
                data-ga4-params={JSON.stringify(viewItemParams)}
              >
                View telemetry module
              </button>
            </article>

            <article class="sandbox-card tracked-card" data-event="add_to_cart">
              <header>
                <p class="sandbox-card__tag mono">Event: add_to_cart</p>
                <h3>Add to cart</h3>
              </header>
              <p>
                Records the addition of the module to the mission build list. The payload mirrors an ecommerce add-to-cart call
                with currency, value, and item details.
              </p>
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="add_to_cart"
                data-ga4-params={JSON.stringify(addToCartParams)}
              >
                Add module to manifest
              </button>
            </article>

            <article class="sandbox-card tracked-card" data-event="begin_checkout">
              <header>
                <p class="sandbox-card__tag mono">Event: begin_checkout</p>
                <h3>Begin checkout</h3>
              </header>
              <p>
                Signals the start of a checkout funnel. Include coupon codes or experiments to evaluate incentives and A/B
                treatments.
              </p>
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="begin_checkout"
                data-ga4-params={JSON.stringify(beginCheckoutParams)}
              >
                Initiate checkout
              </button>
            </article>

            <article class="sandbox-card tracked-card" data-event="purchase">
              <header>
                <p class="sandbox-card__tag mono">Event: purchase</p>
                <h3>Mission purchase</h3>
              </header>
              <p>
                Completes the ecommerce flow with a transaction ID and tender type. This finalizes attribution loops and feeds
                downstream BI platforms.
              </p>
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="purchase"
                data-ga4-params={JSON.stringify(purchaseParams)}
              >
                Confirm purchase
              </button>
            </article>
          </div>
        </div>

        <div class="tracked-group" id="feedback-support">
          <h3 class="tracked-group__title">Feedback, consent &amp; support</h3>
          <p class="tracked-group__intro">
            Move beyond conversions to observe post-interaction signals such as satisfaction, consent choices, and service
            escalations.
          </p>
          <div class="tracked-grid">
            <article class="sandbox-card tracked-card" data-event="rate_content">
              <header>
                <p class="sandbox-card__tag mono">Event: rate_content</p>
                <h3>Experience rating</h3>
              </header>
              <p>
                A range input captures perceived clarity of the module. The sandbox submits the selected score so researchers
                can trend comprehension over time.
              </p>
              <label class="sandbox-form rating-control">
                <span>Clarity score</span>
                <input
                  type="range"
                  min="1"
                  max="5"
                  step="1"
                  value="3"
                  data-ga4-event="rate_content"
                  data-ga4-trigger="change"
                  data-ga4-dynamic="rating"
                  data-ga4-params={JSON.stringify(feedbackParams)}
                />
              </label>
            </article>

            <article class="sandbox-card tracked-card" data-event="consent_update">
              <header>
                <p class="sandbox-card__tag mono">Event: consent_update</p>
                <h3>Consent toggle</h3>
              </header>
              <p>
                Privacy controls require real-time tracking. The change handler maps the checkbox state to the
                <code>consent_granted</code> parameter.
              </p>
              <label class="sandbox-form consent-control">
                <span>Email mission updates</span>
                <input
                  type="checkbox"
                  value="marketing"
                  checked
                  data-ga4-event="consent_update"
                  data-ga4-trigger="change"
                  data-ga4-dynamic="consent"
                />
              </label>
            </article>

            <article class="sandbox-card tracked-card" data-event="start_chat">
              <header>
                <p class="sandbox-card__tag mono">Event: start_chat</p>
                <h3>Support escalation</h3>
              </header>
              <p>
                When operators open a support chat, log the channel and agent type to inform staffing and deflection metrics.
              </p>
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="start_chat"
                data-ga4-params={JSON.stringify(chatStartParams)}
              >
                Initiate support chat
              </button>
            </article>

            <article class="sandbox-card tracked-card" data-event="exception">
              <header>
                <p class="sandbox-card__tag mono">Event: exception</p>
                <h3>Error capture</h3>
              </header>
              <p>
                Surface unexpected failures to GA4 using the <code>exception</code> event. Toggle it here to confirm the
                console records non-fatal issues.
              </p>
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="exception"
                data-ga4-params={JSON.stringify(exceptionParams)}
              >
                Simulate timeout
              </button>
            </article>
        </div>
      </div>

      <div class="tracked-group" id="interface-overlays">
        <h3 class="tracked-group__title">Interface overlays &amp; detail panels</h3>
        <p class="tracked-group__intro">
          Validate instrumentation for modals, accordions, and contextual tooltips. These UI flourishes often live outside
          traditional click paths but still require measurement coverage.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="modal_open">
            <header>
              <p class="sandbox-card__tag mono">Event: modal_open</p>
              <h3>Mission alert modal</h3>
            </header>
            <p>
              Launching the modal fires a <code>modal_open</code> event tagged with modal metadata. Additional buttons inside
              the overlay demonstrate how dismiss and acknowledge actions can be tracked.
            </p>
            <dl class="tracked-definition sandbox-card__meta">
              <div>
                <dt>Trigger</dt>
                <dd>Button click</dd>
              </div>
              <div>
                <dt>Parameters</dt>
                <dd>
                  <code>&#123;&quot;content_type&quot;:&quot;modal&quot;,&quot;content_id&quot;:&quot;mission-alert&quot;&#125;</code>
                </dd>
              </div>
            </dl>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="modal_open"
              data-ga4-params={JSON.stringify(modalViewParams)}
              data-ga4-modal-target="ga4-alert-modal"
              data-ga4-feedback="ga4-modal-status"
            >
              Launch readiness alert
            </button>
            <p id="ga4-modal-status" class="tracked-status">Idle — modal closed.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="view_item_list">
            <header>
              <p class="sandbox-card__tag mono">Event: view_item_list</p>
              <h3>Telemetry FAQ accordion</h3>
            </header>
            <p>
              Accordion toggles emit their expanded state so you can measure which knowledge cards garner the most attention
              without storing UI state elsewhere.
            </p>
            <button
              type="button"
              class="sandbox-action"
              aria-expanded="false"
              aria-controls="ga4-faq-panel"
              data-ga4-event="view_item_list"
              data-ga4-dynamic="accordion"
              data-ga4-params={JSON.stringify(accordionParams)}
            >
              Toggle telemetry FAQ
            </button>
            <div id="ga4-faq-panel" class="tracked-accordion" hidden>
              <h4>Telemetry diagnostics</h4>
              <p>Store-and-forward telemetry should flush within 90 seconds of regaining uplink.</p>
              <h4>Sensor jitter</h4>
              <p>Use the jitter mitigation checklist before rerunning calibrations to avoid duplicate alerts.</p>
            </div>
          </article>

          <article class="sandbox-card tracked-card" data-event="select_content">
            <header>
              <p class="sandbox-card__tag mono">Event: select_content</p>
              <h3>Inline tooltip</h3>
            </header>
            <p>
              Info tooltips are frequently overlooked in measurement plans. This demo maps tooltip exposure and dismissal to a
              custom payload so analysts understand which contextual helpers resonate.
            </p>
            <button
              type="button"
              class="sandbox-action sandbox-action--icon"
              aria-pressed="false"
              aria-controls="ga4-tooltip-panel"
              data-ga4-event="select_content"
              data-ga4-dynamic="tooltip"
              data-ga4-params={JSON.stringify(tooltipParams)}
              data-ga4-feedback="ga4-tooltip-status"
            >
              Toggle tooling primer
            </button>
            <div id="ga4-tooltip-panel" class="tracked-tooltip" hidden>
              <p>The mission tooling primer covers environment setup, script injection order, and testing cadence.</p>
            </div>
            <p id="ga4-tooltip-status" class="tracked-status">Idle — tooltip hidden.</p>
          </article>
        </div>
      </div>

      <div class="tracked-group" id="collaboration-sharing">
        <h3 class="tracked-group__title">Collaboration &amp; sharing</h3>
        <p class="tracked-group__intro">
          Track how operators distribute mission intelligence. Copy, share, and print flows emit <code>share</code> events with
          explicit transport metadata for precise attribution.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="share">
            <header>
              <p class="sandbox-card__tag mono">Event: share</p>
              <h3>Copy link</h3>
            </header>
            <p>
              Copying a brief URL updates the payload with method <code>copy</code> and writes a status message for operators
              verifying instrumentation.
            </p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="share"
              data-ga4-params={JSON.stringify(copyShareParams)}
              data-ga4-copy-text="https://intranet.example/missions/briefing-01"
              data-ga4-feedback="ga4-copy-status"
            >
              Copy mission brief link
            </button>
            <p id="ga4-copy-status" class="tracked-status">Idle — no copy requests yet.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="share">
            <header>
              <p class="sandbox-card__tag mono">Event: share</p>
              <h3>Share to X</h3>
            </header>
            <p>
              Simulates a share sheet dispatch to X. The payload captures the target medium so downstream platforms can build
              channel performance dashboards.
            </p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="share"
              data-ga4-params={JSON.stringify(socialShareParams)}
              data-ga4-feedback="ga4-share-status"
            >
              Stage X share payload
            </button>
            <p id="ga4-share-status" class="tracked-status">Idle — awaiting share interaction.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="share">
            <header>
              <p class="sandbox-card__tag mono">Event: share</p>
              <h3>Print briefing packet</h3>
            </header>
            <p>
              Printing or saving to PDF is tracked as a <code>share</code> event using the <code>print</code> method so you can
              monitor offline dissemination of critical assets.
            </p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="share"
              data-ga4-params={JSON.stringify(printShareParams)}
              data-ga4-feedback="ga4-print-status"
            >
              Log print intent
            </button>
            <p id="ga4-print-status" class="tracked-status">Idle — no print intents logged.</p>
          </article>
        </div>
      </div>

      <div class="tracked-group" id="scheduling-timeline">
        <h3 class="tracked-group__title">Mission scheduling &amp; timeline</h3>
        <p class="tracked-group__intro">
          Calendar inputs, shift selectors, and timeline sliders translate operational planning into measurable signals. Use the
          controls to capture launch windows, sequence progress, and reminder commitments just like a production scheduling
          surface would.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="calendar_select">
            <header>
              <p class="sandbox-card__tag mono">Event: calendar_select</p>
              <h3>Mission window picker</h3>
            </header>
            <p>
              Date inputs are perfect for documenting target launch windows. Changing the field emits the selected ISO date so
              downstream dashboards can compare planned and actual liftoff schedules.
            </p>
            <label class="sandbox-form calendar-select">
              <span class="mono">Select mission date</span>
              <input
                type="date"
                class="sandbox-calendar"
                data-ga4-event="calendar_select"
                data-ga4-trigger="change"
                data-ga4-dynamic="date"
                data-ga4-feedback="ga4-calendar-status"
                data-ga4-params={JSON.stringify(calendarSelectParams)}
              />
            </label>
            <p id="ga4-calendar-status" class="tracked-status">No launch window chosen.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="timeline_adjust">
            <header>
              <p class="sandbox-card__tag mono">Event: timeline_adjust</p>
              <h3>Sequence progress slider</h3>
            </header>
            <p>
              Mission timelines often run through a scrub checklist. The slider mirrors those milestones and pushes the current
              percentage complete so control rooms can audit sequencing pace.
            </p>
            <p class="tracked-readout">Sequence percent: <span id="ga4-timeline-readout" class="mono">50%</span></p>
            <input
              type="range"
              min="0"
              max="100"
              value="50"
              step="5"
              class="timeline-slider"
              data-ga4-event="timeline_adjust"
              data-ga4-trigger="input"
              data-ga4-dynamic="range"
              data-ga4-range-target="ga4-timeline-readout"
              data-ga4-feedback="ga4-timeline-status"
              data-ga4-params={JSON.stringify(timelineAdjustParams)}
            />
            <p id="ga4-timeline-status" class="tracked-status">Sequence aligned at 50%.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="schedule_slot">
            <header>
              <p class="sandbox-card__tag mono">Event: schedule_slot</p>
              <h3>Shift slot selector</h3>
            </header>
            <p>
              Rapid-fire buttons simulate how ground crews reserve staffing windows. Each selection records the slot label and
              handoff crew so staffing systems can reconcile coverage.
            </p>
            <div class="tracked-timeslots" role="group" aria-label="Reserve mission slot">
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="schedule_slot"
                data-ga4-trigger="click"
                data-ga4-dynamic="filter"
                data-ga4-filter-id="mission_slot"
                data-ga4-filter-value="0700Z"
                data-ga4-slot-label="07:00Z Payload integration"
                data-ga4-feedback="ga4-slot-status"
                data-ga4-params={JSON.stringify({
                  ...timeslotSelectParams,
                  slot_code: '0700Z',
                  slot_label: '07:00Z • Payload integration',
                  crew_assignment: 'Payload team'
                })}
              >
                07:00Z Payload integration
              </button>
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="schedule_slot"
                data-ga4-trigger="click"
                data-ga4-dynamic="filter"
                data-ga4-filter-id="mission_slot"
                data-ga4-filter-value="1100Z"
                data-ga4-slot-label="11:00Z Systems rehearsal"
                data-ga4-feedback="ga4-slot-status"
                data-ga4-params={JSON.stringify({
                  ...timeslotSelectParams,
                  slot_code: '1100Z',
                  slot_label: '11:00Z • Systems rehearsal',
                  crew_assignment: 'Guidance ops'
                })}
              >
                11:00Z Systems rehearsal
              </button>
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="schedule_slot"
                data-ga4-trigger="click"
                data-ga4-dynamic="filter"
                data-ga4-filter-id="mission_slot"
                data-ga4-filter-value="1500Z"
                data-ga4-slot-label="15:00Z Final briefing"
                data-ga4-feedback="ga4-slot-status"
                data-ga4-params={JSON.stringify({
                  ...timeslotSelectParams,
                  slot_code: '1500Z',
                  slot_label: '15:00Z • Final briefing',
                  crew_assignment: 'Flight directors'
                })}
              >
                15:00Z Final briefing
              </button>
            </div>
            <p id="ga4-slot-status" class="tracked-status">No staffing slot reserved.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="reminder_set">
            <header>
              <p class="sandbox-card__tag mono">Event: reminder_set</p>
              <h3>Launch reminder commitment</h3>
            </header>
            <p>
              Operators frequently stage reminders ahead of critical holds. Submit a reminder time to log the commitment and
              confirm that notification pipelines receive the chosen offset.
            </p>
            <p class="tracked-readout">Next reminder: <span id="ga4-reminder-readout" class="mono">None scheduled</span></p>
            <form
              class="sandbox-form tracked-inline-form"
              data-ga4-event="reminder_set"
              data-ga4-trigger="submit"
              data-ga4-dynamic="inline"
              data-ga4-inline-field="reminder_time"
              data-ga4-inline-target="ga4-reminder-readout"
              data-ga4-feedback="ga4-reminder-status"
              data-ga4-params={JSON.stringify({
                ...reminderCreateParams,
                reminder_offset: 'PT60M'
              })}
            >
              <label class="mono" for="ga4-reminder-time">Reminder time (UTC)</label>
              <input id="ga4-reminder-time" type="time" name="reminderTime" data-inline-value />
              <button type="submit" class="sandbox-action">Schedule reminder</button>
            </form>
            <p id="ga4-reminder-status" class="tracked-status">Reminder queue idle.</p>
          </article>
        </div>
      </div>

      <div class="tracked-group" id="content-authoring">
        <h3 class="tracked-group__title">Document authoring &amp; annotation</h3>
        <p class="tracked-group__intro">
          Track how mission teams collaborate inside documentation. Inline annotations, resolution toggles, and translation
          controls surface the editorial lifecycle that precedes every launch.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="annotation_create">
            <header>
              <p class="sandbox-card__tag mono">Event: annotation_create</p>
              <h3>Add inline annotation</h3>
            </header>
            <p>
              Submitting a note mirrors what happens when reviewers tag passages inside a mission brief. The sandbox captures
              the note body and ties it to the source document so analytics can quantify collaboration hotspots.
            </p>
            <form
              class="sandbox-form tracked-inline-form"
              data-ga4-event="annotation_create"
              data-ga4-trigger="submit"
              data-ga4-dynamic="inline"
              data-ga4-inline-field="annotation_body"
              data-ga4-feedback="ga4-annotation-status"
              data-ga4-params={JSON.stringify(annotationCommentParams)}
            >
              <label class="mono" for="ga4-annotation-text">Annotation</label>
              <textarea id="ga4-annotation-text" name="annotation" rows="3" placeholder="Flag telemetry step for revision" data-inline-value></textarea>
              <button type="submit" class="sandbox-action">Log annotation</button>
            </form>
            <p id="ga4-annotation-status" class="tracked-status">No annotations logged.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="annotation_status">
            <header>
              <p class="sandbox-card__tag mono">Event: annotation_status</p>
              <h3>Resolve annotation</h3>
            </header>
            <p>
              Tracking resolution toggles keeps document state honest. Flip the control to log whether the note is still open or
              has been cleared by mission control.
            </p>
            <p class="tracked-readout">Annotation state: <span id="ga4-annotation-state" class="mono">Open</span></p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="annotation_status"
              data-ga4-trigger="click"
              data-ga4-dynamic="status"
              data-ga4-status-target="ga4-annotation-state"
              data-ga4-feedback="ga4-status-feedback"
              data-ga4-params={JSON.stringify(annotationStatusParams)}
            >
              Toggle status
            </button>
            <p id="ga4-status-feedback" class="tracked-status">Annotation currently open.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="translation_select">
            <header>
              <p class="sandbox-card__tag mono">Event: translation_select</p>
              <h3>Language toggle</h3>
            </header>
            <p>
              Mission briefs are often localized for international crews. Selecting a locale pushes both the language code and
              presentation layer so localization analytics remain precise.
            </p>
            <label class="sandbox-form">
              <span class="mono">Render language</span>
              <select
                id="ga4-translation-select"
                data-ga4-event="translation_select"
                data-ga4-trigger="change"
                data-ga4-dynamic="filter"
                data-ga4-filter-id="translation_locale"
                data-ga4-feedback="ga4-translation-status"
                data-ga4-params={JSON.stringify(translationSelectParams)}
              >
                <option value="en-US">English (US)</option>
                <option value="de-DE">German</option>
                <option value="ja-JP">Japanese</option>
              </select>
            </label>
            <p id="ga4-translation-status" class="tracked-status">Locale defaulted to English.</p>
          </article>
        </div>
      </div>

      <div class="tracked-group" id="account-guidance">
        <h3 class="tracked-group__title">Account &amp; guidance flows</h3>
        <p class="tracked-group__intro">
          Authenticate operators, register new specialists, and walk teams through guided tours. These patterns provide a
          blueprint for measuring lifecycle engagement beyond anonymous browsing.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="login">
            <header>
              <p class="sandbox-card__tag mono">Event: login</p>
              <h3>Operator login</h3>
            </header>
            <p>
              Record login attempts with authentication method and role. This helps correlate account access with subsequent
              mission actions.
            </p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="login"
              data-ga4-params={JSON.stringify(loginParams)}
              data-ga4-feedback="ga4-login-status"
            >
              Log SSO login
            </button>
            <p id="ga4-login-status" class="tracked-status">Idle — no login attempts recorded.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="sign_up">
            <header>
              <p class="sandbox-card__tag mono">Event: sign_up</p>
              <h3>Mission specialist sign-up</h3>
            </header>
            <p>
              Tracks new account creation with campaign context. Attach the same payload to registration forms to monitor
              program acquisition.
            </p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="sign_up"
              data-ga4-params={JSON.stringify(signUpParams)}
              data-ga4-feedback="ga4-signup-status"
            >
              Register new specialist
            </button>
            <p id="ga4-signup-status" class="tracked-status">Idle — awaiting sign-up events.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="select_content">
            <header>
              <p class="sandbox-card__tag mono">Event: select_content</p>
              <h3>Theme toggle preference</h3>
            </header>
            <p>
              Demonstrates recording preference changes. Toggling the theme applies a class to the preview tile and captures the
              new state inside the payload.
            </p>
            <div id="ga4-theme-demo" class="tracked-theme" data-theme="light">
              <p class="tracked-theme__label">Current theme: <span data-theme-label>Light</span></p>
            </div>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="select_content"
              data-ga4-dynamic="toggle"
              data-ga4-toggle-target="ga4-theme-demo"
              data-ga4-feedback="ga4-theme-status"
              data-ga4-params={JSON.stringify(themeToggleParams)}
            >
              Toggle interface theme
            </button>
            <p id="ga4-theme-status" class="tracked-status">Theme set to light.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="tutorial_begin">
            <header>
              <p class="sandbox-card__tag mono">Events: tutorial_begin / tutorial_complete</p>
              <h3>Guided tutorial</h3>
            </header>
            <p>
              Multi-step tutorials should log each milestone. Use the buttons to simulate begin, midpoint, and completion
              events while the progress indicator updates in tandem.
            </p>
            <div class="tracked-stepper" data-ga4-stepper data-ga4-total-steps="3">
              <ol class="tracked-stepper__list" data-ga4-stepper-track>
                <li class="tracked-stepper__item" data-step="1">Initiate orientation</li>
                <li class="tracked-stepper__item" data-step="2">Review instrumentation</li>
                <li class="tracked-stepper__item" data-step="3">Complete readiness check</li>
              </ol>
              <div class="tracked-stepper__actions">
                <button
                  type="button"
                  class="sandbox-action"
                  data-ga4-event="tutorial_begin"
                  data-ga4-dynamic="step"
                  data-ga4-step="1"
                  data-ga4-step-label="Begin orientation"
                  data-ga4-feedback="ga4-tutorial-status"
                  data-ga4-params={JSON.stringify(tutorialBaseParams)}
                >
                  Begin orientation
                </button>
                <button
                  type="button"
                  class="sandbox-action"
                  data-ga4-event="tutorial_step"
                  data-ga4-dynamic="step"
                  data-ga4-step="2"
                  data-ga4-step-label="Instrumentation review"
                  data-ga4-feedback="ga4-tutorial-status"
                  data-ga4-params={JSON.stringify(tutorialBaseParams)}
                >
                  Log midpoint
                </button>
                <button
                  type="button"
                  class="sandbox-action"
                  data-ga4-event="tutorial_complete"
                  data-ga4-dynamic="step"
                  data-ga4-step="3"
                  data-ga4-step-label="Complete readiness"
                  data-ga4-feedback="ga4-tutorial-status"
                  data-ga4-params={JSON.stringify(tutorialBaseParams)}
                >
                  Complete tutorial
                </button>
              </div>
            </div>
            <p class="tracked-status" id="ga4-tutorial-status">No tutorial events recorded.</p>
          </article>
        </div>
      </div>

      <div class="tracked-group" id="gestures-advanced">
        <h3 class="tracked-group__title">Gestures &amp; advanced inputs</h3>
        <p class="tracked-group__intro">
          Drag-and-drop, file uploads, keyboard shortcuts, and focus states round out instrumentation coverage.
          These scenarios demonstrate how to capture intent signals beyond simple clicks.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="drag_payload">
            <header>
              <p class="sandbox-card__tag mono">Event: drag_payload</p>
              <h3>Drag &amp; drop manifest</h3>
            </header>
            <p>
              Drag the manifest badge into the drop zone to log a custom drag event. GA4 records the payload source,
              drop target, and pointer coordinates so analysts can validate complex workbench gestures.
            </p>
            <dl class="tracked-definition sandbox-card__meta">
              <div>
                <dt>Trigger</dt>
                <dd>Drop</dd>
              </div>
              <div>
                <dt>Parameters</dt>
                <dd><code>{`{"interaction_type":"drag_drop","drop_zone":"Telemetry console"}`}</code></dd>
              </div>
            </dl>
            <div class="tracked-drag">
              <div
                id="ga4-drag-manifest"
                class="tracked-drag__source"
                draggable="true"
                data-ga4-drag-source="manifest"
                data-ga4-drag-label="Mission manifest"
              >
                <span class="tracked-drag__title mono">Payload</span>
                <strong>Mission manifest</strong>
              </div>
              <div
                class="tracked-dropzone"
                data-ga4-event="drag_payload"
                data-ga4-trigger="drop"
                data-ga4-dynamic="drag"
                data-ga4-drop-zone="Telemetry console"
                data-ga4-params={JSON.stringify(dragManifestParams)}
                data-ga4-feedback="ga4-drag-status"
              >
                Drop manifest to hand off
              </div>
            </div>
            <p id="ga4-drag-status" class="tracked-status">Idle — manifest undelivered.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="file_upload">
            <header>
              <p class="sandbox-card__tag mono">Event: file_upload</p>
              <h3>Attach instrumentation log</h3>
            </header>
            <p>
              File inputs push rich metadata including file names, extensions, and aggregate size. The sandbox intercepts
              the selection so operators can verify uploads before piping them into GA4.
            </p>
            <label class="sandbox-form file-upload" data-ga4-upload>
              <span class="mono">Choose log file</span>
              <input
                type="file"
                accept=".csv,.json"
                data-ga4-event="file_upload"
                data-ga4-trigger="change"
                data-ga4-dynamic="file"
                data-ga4-upload-method="manual"
                data-ga4-params={JSON.stringify(fileUploadParams)}
                data-ga4-feedback="ga4-upload-status"
              />
            </label>
            <p id="ga4-upload-status" class="tracked-status">Idle — awaiting file selection.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="command_palette">
            <header>
              <p class="sandbox-card__tag mono">Event: command_palette</p>
              <h3>Keyboard shortcut</h3>
            </header>
            <p>
              Capture keyboard shortcuts used to launch utilities like a command palette. GA4 can log the specific
              combination to understand power-user behaviour.
            </p>
            <div
              class="hotkey-instruction"
              role="presentation"
              data-ga4-hotkey="meta+k,ctrl+k"
              data-ga4-hotkey-label="Command palette"
              data-ga4-event="command_palette"
              data-ga4-dynamic="hotkey"
              data-ga4-params={JSON.stringify(commandPaletteParams)}
              data-ga4-feedback="ga4-hotkey-status"
            >
              <span class="hotkey-badge mono">⌘ K</span>
              <span class="hotkey-badge mono">Ctrl K</span>
              <p class="hotkey-instruction__caption">Press to launch command palette</p>
            </div>
            <p id="ga4-hotkey-status" class="tracked-status">Idle — shortcut not used.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="form_start">
            <header>
              <p class="sandbox-card__tag mono">Event: form_start</p>
              <h3>Focus instrumentation</h3>
            </header>
            <p>
              Tracking focus states reveals where operators pause before committing. The field below logs a
              <code>form_start</code> hit the moment it receives focus.
            </p>
            <label class="sandbox-form focus-capture">
              <span class="mono">Call sign</span>
              <input
                type="text"
                name="callSign"
                placeholder="Vanguard-12"
                data-ga4-event="form_start"
                data-ga4-trigger="focus"
                data-ga4-dynamic="focus"
                data-ga4-params={JSON.stringify(formFocusParams)}
                data-ga4-feedback="ga4-focus-status"
              />
            </label>
            <p id="ga4-focus-status" class="tracked-status">Idle — focus not yet captured.</p>
          </article>
        </div>
      </div>

      <div class="tracked-group" id="data-tables">
        <h3 class="tracked-group__title">Data tables &amp; inline updates</h3>
        <p class="tracked-group__intro">
          Mission control tables often power operational dashboards. The sandbox models sort, filter, and inline
          edit workflows so you can observe how stateful UI changes translate into GA4 events.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="table_sort">
            <header>
              <p class="sandbox-card__tag mono">Event: table_sort</p>
              <h3>Roster sort action</h3>
            </header>
            <p>
              Sort interactions communicate which column and direction the operator selected. Use the control to
              reorder the roster by crew status and inspect the resulting <code>sort_field</code> metadata.
            </p>
            <div class="tracked-table-wrapper">
              <table class="tracked-table" id="ga4-crew-table">
                <caption class="visually-hidden">Mission crew roster</caption>
                <thead>
                  <tr>
                    <th scope="col">Crew member</th>
                    <th scope="col">Role</th>
                    <th scope="col">Status</th>
                  </tr>
                </thead>
                <tbody>
                  <tr data-status="ready" data-sort-order="1">
                    <td>Lt. Vega</td>
                    <td>Flight director</td>
                    <td class="mono">Ready</td>
                  </tr>
                  <tr data-status="standby" data-sort-order="2">
                    <td>Cmdr. Malik</td>
                    <td>Navigation lead</td>
                    <td class="mono">Standby</td>
                  </tr>
                  <tr data-status="maintenance" data-sort-order="3">
                    <td>Spec. Ito</td>
                    <td>Propulsion engineer</td>
                    <td class="mono">Maintenance</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="table_sort"
              data-ga4-dynamic="sort"
              data-ga4-sort-field="crew_status"
              data-ga4-sort-direction="asc"
              data-ga4-sort-table="ga4-crew-table"
              data-ga4-feedback="ga4-sort-status"
              data-ga4-params={JSON.stringify(tableSortParams)}
            >
              Toggle status sort
            </button>
            <p id="ga4-sort-status" class="tracked-status">Initial order &mdash; ready crew first.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="table_filter">
            <header>
              <p class="sandbox-card__tag mono">Event: table_filter</p>
              <h3>Status filter selection</h3>
            </header>
            <p>
              Filtering narrows the analysis surface. Choose a crew status from the select menu to see how the
              event packages <code>filter_value</code> and <code>filter_state</code> along with the roster metadata.
            </p>
            <label class="sandbox-form">
              <span class="mono">Filter crew roster</span>
              <select
                id="ga4-filter-select"
                data-ga4-event="table_filter"
                data-ga4-trigger="change"
                data-ga4-dynamic="filter"
                data-ga4-filter-id="crew_status"
                data-ga4-filter-table="ga4-crew-table"
                data-ga4-feedback="ga4-filter-status"
                data-ga4-params={JSON.stringify(tableFilterParams)}
              >
                <option value="all">Show all crew</option>
                <option value="ready">Ready only</option>
                <option value="standby">Standby only</option>
                <option value="maintenance">Maintenance only</option>
              </select>
            </label>
            <p id="ga4-filter-status" class="tracked-status">No filter applied.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="inline_edit">
            <header>
              <p class="sandbox-card__tag mono">Event: inline_edit</p>
              <h3>Inline roster update</h3>
            </header>
            <p>
              Inline edits capture the exact field and value operators adjust. Submit a new call sign to watch the
              sandbox broadcast <code>field_name</code>, <code>field_value</code>, and update status in the console.
            </p>
            <p class="tracked-inline-display">
              Current call sign: <span id="ga4-inline-call-sign" class="mono">Voyager-1</span>
            </p>
            <form
              class="tracked-inline-form"
              data-ga4-event="inline_edit"
              data-ga4-trigger="submit"
              data-ga4-dynamic="inline"
              data-ga4-inline-field="call_sign"
              data-ga4-inline-target="ga4-inline-call-sign"
              data-ga4-feedback="ga4-inline-status"
              data-ga4-params={JSON.stringify(inlineEditParams)}
            >
              <label class="sandbox-form">
                <span class="mono">New call sign</span>
                <input type="text" name="callSign" placeholder="Aurora-3" required data-inline-value />
              </label>
              <button type="submit" class="sandbox-action">Commit update</button>
            </form>
            <p id="ga4-inline-status" class="tracked-status">Call sign unchanged.</p>
          </article>
        </div>
      </div>

      <div class="tracked-group" id="analog-controls">
        <h3 class="tracked-group__title">Analog controls &amp; calibrations</h3>
        <p class="tracked-group__intro">
          Range sliders and color pickers translate physical console adjustments into digital events. These inputs
          demonstrate how to capture the precise values operators dial in.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="dial_calibration">
            <header>
              <p class="sandbox-card__tag mono">Event: dial_calibration</p>
              <h3>Throttle calibration</h3>
            </header>
            <p>
              The throttle slider emits both absolute and normalized percentages so analysts can trend how crews
              prepare burn sequences. Adjust the range input to send an updated <code>control_percent</code> value.
            </p>
            <div class="tracked-gauge">
              <label class="sandbox-form">
                <span class="mono">Throttle output</span>
                <input
                  type="range"
                  min="0"
                  max="100"
                  value="42"
                  step="1"
                  data-ga4-event="dial_calibration"
                  data-ga4-trigger="change"
                  data-ga4-dynamic="range"
                  data-ga4-range-target="ga4-range-output"
                  data-ga4-feedback="ga4-range-status"
                  data-ga4-params={JSON.stringify(rangeCalibrationParams)}
                />
              </label>
              <output id="ga4-range-output" class="tracked-output mono">42%</output>
            </div>
            <p id="ga4-range-status" class="tracked-status">Throttle resting at 42%.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="color_adjust">
            <header>
              <p class="sandbox-card__tag mono">Event: color_adjust</p>
              <h3>Hull accent tuning</h3>
            </header>
            <p>
              Color pickers can log creative experimentation. Select a hue to update the live swatch and inspect the
              <code>color_value</code> pushed into GA4.
            </p>
            <div class="tracked-color">
              <div id="ga4-color-swatch" class="tracked-color__swatch" aria-hidden="true"></div>
              <label class="sandbox-form color-picker">
                <span class="mono">Accent color</span>
                <input
                  type="color"
                  value="#7e2522"
                  data-ga4-event="color_adjust"
                  data-ga4-trigger="change"
                  data-ga4-dynamic="color"
                  data-ga4-color-target="ga4-color-swatch"
                  data-ga4-feedback="ga4-color-status"
                  data-ga4-params={JSON.stringify(colorCalibrationParams)}
                />
              </label>
            </div>
            <p id="ga4-color-status" class="tracked-status">Accent set to #7E2522.</p>
          </article>
        </div>
      </div>

      <div class="tracked-group" id="environment-signals">
        <h3 class="tracked-group__title">Environment &amp; device sensors</h3>
        <p class="tracked-group__intro">
          Network shifts, viewport changes, and location lookups all influence user journeys. These controls model how
          to broadcast environment context alongside primary engagement events.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="network_state">
            <header>
              <p class="sandbox-card__tag mono">Event: network_state</p>
              <h3>Network availability monitor</h3>
            </header>
            <p>
              Toggling connectivity illustrates how GA4 can capture <code>network_state</code> and fallback logic when
              visitors go offline. Use the control to simulate connectivity gains and losses.
            </p>
            <p class="tracked-readout">Current status: <span id="ga4-network-readout" class="mono">Online</span></p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="network_state"
              data-ga4-dynamic="network"
              data-ga4-network-state="online"
              data-ga4-network-target="ga4-network-readout"
              data-ga4-feedback="ga4-network-status"
              data-ga4-params={JSON.stringify(networkToggleParams)}
            >
              Toggle connectivity
            </button>
            <p id="ga4-network-status" class="tracked-status">Network derived from browser API.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="orientation_lock">
            <header>
              <p class="sandbox-card__tag mono">Event: orientation_lock &amp; screen_mode</p>
              <h3>Viewport instrumentation</h3>
            </header>
            <p>
              Device orientation and fullscreen states influence layout analytics. The sandbox maintains an observation
              viewport so you can flip orientation or trigger immersive mode.
            </p>
            <div id="ga4-screen-display" class="tracked-screen" data-orientation="landscape">
              <span class="tracked-screen__label mono">Observation viewport</span>
            </div>
            <div class="tracked-screen__controls">
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="orientation_lock"
                data-ga4-dynamic="orientation"
                data-ga4-orientation-state="landscape"
                data-ga4-orientation-target="ga4-screen-display"
                data-ga4-feedback="ga4-orientation-status"
                data-ga4-params={JSON.stringify(orientationParams)}
              >
                Toggle orientation lock
              </button>
              <button
                type="button"
                class="sandbox-action"
                data-ga4-event="screen_mode"
                data-ga4-dynamic="fullscreen"
                data-ga4-screen-state="windowed"
                data-ga4-screen-target="ga4-screen-display"
                data-ga4-feedback="ga4-screen-status"
                data-ga4-params={JSON.stringify(screenModeParams)}
              >
                Toggle immersive mode
              </button>
            </div>
            <p id="ga4-orientation-status" class="tracked-status">Orientation locked to landscape.</p>
            <p id="ga4-screen-status" class="tracked-status">Viewport currently windowed.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="geolocation_capture">
            <header>
              <p class="sandbox-card__tag mono">Event: geolocation_capture</p>
              <h3>Geolocation sampling</h3>
            </header>
            <p>
              Not every environment permits live geolocation, so this demo synthesizes coordinates while maintaining the
              Measurement Protocol shape GA4 expects (<code>latitude</code>, <code>longitude</code>, and
              <code>accuracy</code>).
            </p>
            <p class="tracked-readout">
              Last coordinates: <span id="ga4-geo-readout" class="mono">None captured</span>
            </p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="geolocation_capture"
              data-ga4-dynamic="geo"
              data-ga4-geo-target="ga4-geo-readout"
              data-ga4-feedback="ga4-geo-status"
              data-ga4-params={JSON.stringify(geolocationParams)}
            >
              Sample coordinates
            </button>
            <p id="ga4-geo-status" class="tracked-status">No geolocation sampled.</p>
          </article>
        </div>
      </div>

      <div class="tracked-group" id="progressive-features">
        <h3 class="tracked-group__title">Progressive web features</h3>
        <p class="tracked-group__intro">
          Install prompts, push permissions, and background sync illustrate how to instrument app-like behaviors. Use
          the controls to generate events that mirror real-world PWA flows.
        </p>
        <div class="tracked-grid">
          <article class="sandbox-card tracked-card" data-event="pwa_install_prompt">
            <header>
              <p class="sandbox-card__tag mono">Event: pwa_install_prompt</p>
              <h3>Install prompt outcome</h3>
            </header>
            <p>
              Each activation alternates between acceptance and dismissal to demonstrate how GA4 can tally install
              uptake. The payload includes <code>prompt_outcome</code> so analysts can monitor adoption health.
            </p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="pwa_install_prompt"
              data-ga4-dynamic="pwa"
              data-ga4-pwa-state="dismissed"
              data-ga4-feedback="ga4-pwa-status"
              data-ga4-params={JSON.stringify(pwaInstallParams)}
            >
              Toggle install response
            </button>
            <p id="ga4-pwa-status" class="tracked-status">Prompt not yet accepted.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="push_opt_in">
            <header>
              <p class="sandbox-card__tag mono">Event: push_opt_in</p>
              <h3>Push permission flow</h3>
            </header>
            <p>
              Push prompts are notoriously sensitive. Alternate between granting and denying permission to understand how
              GA4 can reflect consent changes in real time.
            </p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="push_opt_in"
              data-ga4-dynamic="permission"
              data-ga4-permission-state="default"
              data-ga4-feedback="ga4-push-status"
              data-ga4-params={JSON.stringify(pushConsentParams)}
            >
              Toggle push permission
            </button>
            <p id="ga4-push-status" class="tracked-status">Permission state: default.</p>
          </article>

          <article class="sandbox-card tracked-card" data-event="background_sync">
            <header>
              <p class="sandbox-card__tag mono">Event: background_sync</p>
              <h3>Background sync queue</h3>
            </header>
            <p>
              Offline-friendly applications often queue jobs for Service Workers. Enqueue mock sync jobs to emit queue
              depth and job identifiers in the Measurement Protocol payload.
            </p>
            <p class="tracked-readout">
              Jobs queued: <span id="ga4-sync-readout" class="mono">0</span>
            </p>
            <button
              type="button"
              class="sandbox-action"
              data-ga4-event="background_sync"
              data-ga4-dynamic="sync"
              data-ga4-sync-count="0"
              data-ga4-sync-target="ga4-sync-readout"
              data-ga4-feedback="ga4-sync-status"
              data-ga4-params={JSON.stringify(backgroundSyncParams)}
            >
              Queue sync job
            </button>
            <p id="ga4-sync-status" class="tracked-status">No background jobs queued.</p>
          </article>
        </div>
      </div>

        <div class="tracked-group" id="scroll-visibility">
          <h3 class="tracked-group__title">Scroll &amp; visibility</h3>
          <p class="tracked-group__intro">
            Scroll depth milestones help confirm whether deep documentation is actually consumed. Reach the sentinel near the
            footer to trigger a <code>scroll</code> event.
          </p>
          <div class="tracked-grid">
            <article class="sandbox-card tracked-card" data-event="scroll">
              <header>
                <p class="sandbox-card__tag mono">Event: scroll</p>
                <h3>Deep scroll sentinel</h3>
              </header>
              <p>
                A hidden sentinel monitors when visitors view the final 10% of the page. Intersection Observer fires once per
                session to avoid duplicate hits.
              </p>
              <div class="scroll-instruction">
                <p>Scroll toward the console until the sentinel badge becomes visible.</p>
                <div
                  class="scroll-sentinel"
                  data-ga4-scroll
                  data-ga4-event="scroll"
                  data-ga4-trigger="observe"
                  data-ga4-params={JSON.stringify(scrollDepthParams)}
                  role="status"
                  aria-live="polite"
                >
                  Scroll sentinel &mdash; log fires at 90% depth
                </div>
              </div>
            </article>
        </div>
      </div>
    </section>

    <div
      id="ga4-alert-modal"
      class="sandbox-modal"
      data-modal
      data-modal-feedback="ga4-modal-status"
      role="dialog"
      aria-modal="true"
      aria-labelledby="ga4-alert-title"
      aria-describedby="ga4-alert-body"
      hidden
      aria-hidden="true"
    >
      <div class="sandbox-modal__dialog">
        <header class="sandbox-modal__header">
          <h2 id="ga4-alert-title">Mission readiness alert</h2>
        </header>
        <div class="sandbox-modal__body" id="ga4-alert-body">
          <p>
            Orbital telemetry queue has exceeded the normal threshold. Confirm acknowledgement or dismiss the message to keep
            your analytics instrumentation in sync with mission control.
          </p>
        </div>
        <footer class="sandbox-modal__actions">
          <button
            type="button"
            class="sandbox-action"
            data-ga4-event="modal_dismiss"
            data-ga4-params={JSON.stringify(modalDismissParams)}
            data-ga4-modal-close="true"
            data-ga4-feedback="ga4-modal-status"
          >
            Dismiss alert
          </button>
          <button
            type="button"
            class="sandbox-action"
            data-ga4-event="modal_acknowledge"
            data-ga4-params={JSON.stringify(modalAcknowledgeParams)}
            data-ga4-modal-close="true"
            data-ga4-feedback="ga4-modal-status"
          >
            Acknowledge alert
          </button>
        </footer>
      </div>
    </div>

    <aside class="sandbox-console" data-console-panel aria-labelledby="ga4-console-heading">
        <h2 id="ga4-console-heading">Mock GA4 console</h2>
        <p class="console-copy">
          Payloads are formatted to match Measurement Protocol requests. Newest events appear at the top.
        </p>
        <div class="sandbox-console__toolbar" role="group" aria-label="GA4 console controls">
          <button type="button" class="console-control" data-console-scroll disabled>Jump to latest</button>
          <button type="button" class="console-control" data-console-clear disabled>Clear console</button>
        </div>
        <div
          class="console-stream"
          data-console-stream
          aria-live="polite"
          role="log"
          tabindex="0"
        >
          <p class="console-empty" data-console-empty>Interact with the sandbox to emit GA4 traffic.</p>
        </div>
      </aside>
    </div>

    <section class="sandbox-snippet" aria-labelledby="ga4-snippet-heading">
      <h2 id="ga4-snippet-heading">Base instrumentation snippet</h2>
      <p>
        The mock console is powered by the same <code>gtag</code> interface used in production. Replace the
        measurement ID with your own property value when deploying.
      </p>
      <pre class="mono"><code>{`&lt;script async src="https://www.googletagmanager.com/gtag/js?id=G-ABCDE12345"&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag()&#123;dataLayer.push(arguments);&#125;
  gtag('js', new Date());
  gtag('config', 'G-ABCDE12345');
&lt;/script&gt;`}</code></pre>
    </section>
  </div>

  <script>
  const measurementId = 'G-ABCDE12345';
  const mockClientId = '555.4242424242';
  const endpoint = 'https://www.google-analytics.com/mp/collect';
  window.dataLayer = window.dataLayer || [];

    let activeModal = null;
    let activeDragPayload = null;

    function findModal(id) {
      if (!id) {
        return null;
      }
      return document.getElementById(id);
    }

    function openModal(modal, trigger) {
      if (!modal) {
        return;
      }
      modal.hidden = false;
      modal.setAttribute('aria-hidden', 'false');
      modal.classList.add('sandbox-modal--visible');
      activeModal = modal;
      if (trigger && trigger.id) {
        modal.dataset.returnFocus = trigger.id;
      }
      const focusTarget = modal.querySelector('[data-ga4-modal-close]') || modal.querySelector('button');
      if (focusTarget && typeof focusTarget.focus === 'function') {
        focusTarget.focus();
      }
    }

    function closeModal(modal) {
      if (!modal) {
        return;
      }
      modal.hidden = true;
      modal.setAttribute('aria-hidden', 'true');
      modal.classList.remove('sandbox-modal--visible');
      if (activeModal === modal) {
        activeModal = null;
      }
      if (modal.dataset.returnFocus) {
        const returnNode = document.getElementById(modal.dataset.returnFocus);
        if (returnNode && typeof returnNode.focus === 'function') {
          returnNode.focus();
        }
        delete modal.dataset.returnFocus;
      }
    }

    function formatTimestamp() {
      return new Date().toLocaleTimeString();
    }

    function updateFeedback(node, message) {
      if (!node) {
        return;
      }
      const feedbackId =
        typeof node === 'string'
          ? node
          : node && node.dataset
            ? node.dataset.ga4Feedback
            : undefined;
      if (!feedbackId) {
        return;
      }
      const feedbackNode = document.getElementById(feedbackId);
      if (!feedbackNode) {
        return;
      }
      feedbackNode.textContent = message;
    }

    function parseHotkeyCombo(combo) {
      const blueprint = { key: '', ctrl: undefined, meta: undefined, alt: undefined, shift: undefined };
      const parts = combo
        .toLowerCase()
        .split('+')
        .map((part) => part.trim())
        .filter(Boolean);

      parts.forEach((part) => {
        if (part === 'ctrl' || part === 'control') {
          blueprint.ctrl = true;
        } else if (part === 'meta' || part === 'cmd' || part === 'command') {
          blueprint.meta = true;
        } else if (part === 'shift') {
          blueprint.shift = true;
        } else if (part === 'alt' || part === 'option') {
          blueprint.alt = true;
        } else {
          blueprint.key = part;
        }
      });

      return blueprint;
    }

    function matchesHotkey(event, combo) {
      if (!combo) {
        return false;
      }
      const key = (event.key || '').toLowerCase();
      if (combo.key && combo.key !== key) {
        return false;
      }
      if (combo.ctrl !== undefined && combo.ctrl !== event.ctrlKey) {
        return false;
      }
      if (combo.meta !== undefined && combo.meta !== event.metaKey) {
        return false;
      }
      if (combo.shift !== undefined && combo.shift !== event.shiftKey) {
        return false;
      }
      if (combo.alt !== undefined && combo.alt !== event.altKey) {
        return false;
      }
      return true;
    }

    function createSandboxConsole({ limit = 12 } = {}) {
      const panel = document.querySelector('[data-console-panel]');
      const stream = panel ? panel.querySelector('[data-console-stream]') : null;
      const empty = stream ? stream.querySelector('[data-console-empty]') : null;
      const clearButton = panel ? panel.querySelector('[data-console-clear]') : null;
      const scrollButton = panel ? panel.querySelector('[data-console-scroll]') : null;

      if (!panel || !stream) {
        return null;
      }

      const hideEmpty = () => {
        if (empty) {
          empty.hidden = true;
        }
      };

      const showEmpty = () => {
        if (empty) {
          empty.hidden = false;
        }
      };

      const updateControls = () => {
        const hasEntries = !!stream.querySelector('.console-entry');
        if (clearButton) {
          clearButton.disabled = !hasEntries;
        }
        if (scrollButton) {
          scrollButton.disabled = !hasEntries;
        }
      };

      const focusPanel = () => {
        const rect = panel.getBoundingClientRect();
        const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
        if (!fullyVisible) {
          panel.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      };

      if (clearButton) {
        clearButton.addEventListener('click', () => {
          stream.querySelectorAll('.console-entry').forEach((entry) => entry.remove());
          showEmpty();
          updateControls();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
          if (typeof stream.focus === 'function') {
            stream.focus();
          }
        });
      }

      if (scrollButton) {
        scrollButton.addEventListener('click', () => {
          focusPanel();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
        });
      }

      updateControls();

      return {
        append(entry) {
          hideEmpty();
          entry.classList.add('console-entry--recent');
          entry.addEventListener(
            'animationend',
            () => entry.classList.remove('console-entry--recent'),
            { once: true }
          );
          stream.prepend(entry);
          const entries = Array.from(stream.querySelectorAll('.console-entry'));
          if (limit && entries.length > limit) {
            entries.slice(limit).forEach((oldEntry) => oldEntry.remove());
          }
          updateControls();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
          focusPanel();
        }
      };
    }

    const consoleUI = createSandboxConsole({ limit: 12 });

    function formatPayload(args) {
      const [command, param1, param2] = args;
      const body = {
        measurement_id: measurementId,
        client_id: mockClientId
      };

      if (command === 'config') {
        body.config = Object.assign({ send_page_view: true }, param2 || {});
      } else if (command === 'event') {
        body.events = [
          {
            name: param1,
            params: param2 || {}
          }
        ];
      } else if (command === 'js') {
        body.command = 'js';
        body.value = param1 instanceof Date ? param1.toISOString() : param1;
      } else {
        body.command = command;
        if (param1 !== undefined) {
          body.value = param1;
        }
        if (param2) {
          body.params = param2;
        }
      }

      return {
        method: 'POST',
        endpoint,
        body,
        preformatted: JSON.stringify(body, null, 2)
      };
    }

    function appendLog(args) {
      if (!consoleUI) {
        return;
      }

      const payload = formatPayload(args);
      const entry = document.createElement('article');
      entry.className = 'console-entry';
      entry.innerHTML = `
        <header class="console-entry__meta">
          <span class="console-entry__method">${payload.method}</span>
          <span class="console-entry__endpoint">${payload.endpoint}</span>
          <span class="console-entry__timestamp">${new Date().toLocaleTimeString()}</span>
        </header>
        <pre class="console-entry__body">${payload.preformatted}</pre>
      `;
      consoleUI.append(entry);
    }

    function gtag() {
      const args = Array.from(arguments);
      window.dataLayer.push(args);
      appendLog(args);
    }

    window.gtag = gtag;

    gtag('js', new Date());
    gtag('config', measurementId, { send_page_view: true, page_title: document.title });

    function trackEvent(name, params) {
      gtag('event', name, params);
    }

    trackEvent('page_view', {
      page_location: window.location.href,
      page_title: document.title
    });

    function parseParams(node) {
      const raw = node.dataset.ga4Params;
      if (!raw) {
        return {};
      }
      try {
        return JSON.parse(raw);
      } catch (error) {
        return {};
      }
    }

    function applyDynamicParams(node, params, event) {
      const dynamicType = node.dataset.ga4Dynamic;
      if (!dynamicType) {
        return params;
      }

      const nextParams = Object.assign({}, params);

      if (dynamicType === 'mission') {
        const mission = node.querySelector('input[name="mission"]');
        const missionValue = mission && mission.value.trim();
        nextParams.mission_focus = missionValue && missionValue.length ? missionValue : 'unspecified';
      }

      if (dynamicType === 'search') {
        const field = node.querySelector('input[name="searchTerm"]');
        const query = field && field.value.trim();
        nextParams.search_term = query && query.length ? query : '(not provided)';
        if (typeof nextParams.results_count !== 'number') {
          nextParams.results_count = 12;
        }
      }

      if (dynamicType === 'tab') {
        const group = node.closest('[data-ga4-tab-group]');
        if (group) {
          const tabs = group.querySelectorAll('[role="tab"]');
          tabs.forEach((tab) => {
            tab.setAttribute('aria-pressed', tab === node ? 'true' : 'false');
          });
        }
        const tabId = node.dataset.ga4Tab;
        if (tabId) {
          nextParams.content_id = tabId;
        }
        if (!nextParams.content_name && node.textContent) {
          nextParams.content_name = node.textContent.trim();
        }
      }

      if (dynamicType === 'rating') {
        const value = Number(node.value);
        nextParams.rating_value = Number.isFinite(value) ? value : null;
        const max = Number(node.max);
        if (Number.isFinite(max)) {
          nextParams.rating_scale_max = max;
        }
      }

      if (dynamicType === 'consent') {
        nextParams.consent_type = node.value || nextParams.consent_type || 'unspecified';
        nextParams.consent_granted = node.checked;
      }

      if (dynamicType === 'accordion') {
        const expanded = node.getAttribute('aria-expanded') === 'true';
        const nextExpanded = !expanded;
        node.setAttribute('aria-expanded', String(nextExpanded));
        const panelId = node.getAttribute('aria-controls');
        if (panelId) {
          const panel = document.getElementById(panelId);
          if (panel) {
            panel.hidden = !nextExpanded;
          }
        }
        nextParams.interaction_state = nextExpanded ? 'expanded' : 'collapsed';
      }

      if (dynamicType === 'tooltip') {
        const pressed = node.getAttribute('aria-pressed') === 'true';
        const nextPressed = !pressed;
        node.setAttribute('aria-pressed', String(nextPressed));
        const panelId = node.getAttribute('aria-controls');
        if (panelId) {
          const panel = document.getElementById(panelId);
          if (panel) {
            panel.hidden = !nextPressed;
          }
        }
        nextParams.interaction_state = nextPressed ? 'visible' : 'hidden';
      }

      if (dynamicType === 'toggle') {
        const targetId = node.dataset.ga4ToggleTarget;
        const target = targetId ? document.getElementById(targetId) : null;
        let currentState = node.dataset.ga4ToggleState || 'light';
        if (target && target.dataset.theme) {
          currentState = target.dataset.theme;
        }
        const nextState = currentState === 'dark' ? 'light' : 'dark';
        nextParams.previous_state = currentState;
        nextParams.toggle_state = nextState;
        if (target) {
          target.dataset.theme = nextState;
          target.classList.toggle('tracked-theme--dark', nextState === 'dark');
          const label = target.querySelector('[data-theme-label]');
          if (label) {
            label.textContent = nextState.charAt(0).toUpperCase() + nextState.slice(1);
          }
        }
        node.dataset.ga4ToggleState = nextState;
      }

      if (dynamicType === 'status') {
        const currentState = node.dataset.ga4StatusState || 'open';
        const nextState = currentState === 'resolved' ? 'open' : 'resolved';
        node.dataset.ga4StatusState = nextState;
        nextParams.annotation_status = nextState;
        nextParams.previous_status = currentState;

        const targetId = node.dataset.ga4StatusTarget;
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target) {
            const formatted = nextState.charAt(0).toUpperCase() + nextState.slice(1);
            target.textContent = formatted;
          }
        }
      }

      if (dynamicType === 'step') {
        const stepper = node.closest('[data-ga4-stepper]');
        const stepNumber = Number(node.dataset.ga4Step) || 1;
        const total = stepper ? Number(stepper.dataset.ga4TotalSteps) || tutorialBaseParams.step_count : tutorialBaseParams.step_count;
        const label = node.dataset.ga4StepLabel || (node.textContent ? node.textContent.trim() : 'Step');
        nextParams.step_number = stepNumber;
        nextParams.step_count = total;
        nextParams.step_label = label;
        if (stepper) {
          const tracker = stepper.querySelector('[data-ga4-stepper-track]');
          if (tracker) {
            const items = tracker.querySelectorAll('[data-step]');
            items.forEach((item) => {
              const itemStep = Number(item.dataset.step);
              if (Number.isFinite(itemStep)) {
                item.classList.toggle('tracked-stepper__item--complete', itemStep <= stepNumber);
              }
            });
          }
        }
      }

      if (dynamicType === 'drag') {
        const textContent = node.textContent ? node.textContent.trim() : '';
        const dropZone = node.dataset.ga4DropZone || node.dataset.ga4DropLabel || textContent;
        if (dropZone) {
          nextParams.drop_zone = dropZone;
        }
        if (activeDragPayload) {
          nextParams.drag_source_id = activeDragPayload.id;
          nextParams.drag_source_label = activeDragPayload.label;
        }
        if (event && typeof event.clientX === 'number') {
          nextParams.pointer_x = Math.round(event.clientX);
          nextParams.pointer_y = Math.round(event.clientY);
        }
        if (!nextParams.interaction_type) {
          nextParams.interaction_type = 'drag_drop';
        }
      }

      if (dynamicType === 'file') {
        const files = node.files ? Array.from(node.files) : [];
        nextParams.file_count = files.length;
        if (files.length > 0) {
          nextParams.file_names = files.slice(0, 3).map((file) => file.name);
          nextParams.file_types = files.slice(0, 3).map((file) => file.type || file.name.split('.').pop() || 'unknown');
          const totalSize = files.reduce((total, file) => total + (file.size || 0), 0);
          nextParams.file_bytes = totalSize;
        }
        if (node.dataset.ga4UploadMethod) {
          nextParams.upload_method = node.dataset.ga4UploadMethod;
        }
      }

      if (dynamicType === 'hotkey') {
        const parts = [];
        if (event && event.metaKey) parts.push('Meta');
        if (event && event.ctrlKey) parts.push('Ctrl');
        if (event && event.shiftKey) parts.push('Shift');
        if (event && event.altKey) parts.push('Alt');
        if (event && event.key) {
          const normalized = event.key.length === 1 ? event.key.toUpperCase() : event.key;
          parts.push(normalized);
        }
        const combination = parts.join('+') || node.dataset.ga4HotkeyLabel || node.dataset.ga4Hotkey || 'Shortcut';
        nextParams.hotkey_combination = combination;
        if (node.dataset.ga4HotkeyLabel) {
          nextParams.hotkey_label = node.dataset.ga4HotkeyLabel;
        }
        nextParams.trigger_source = 'keyboard';
      }

      if (dynamicType === 'focus') {
        const fieldName = node.getAttribute('name') || node.id || node.getAttribute('aria-label') || 'field';
        nextParams.focus_target = fieldName;
        nextParams.focus_state = event && event.type ? event.type : 'focus';
      }

      if (dynamicType === 'sort') {
        const field = node.dataset.ga4SortField || 'column';
        const tableId = node.dataset.ga4SortTable;
        const currentDirection = node.dataset.ga4SortDirection || 'asc';
        const nextDirection = currentDirection === 'asc' ? 'desc' : 'asc';
        nextParams.sort_field = field;
        nextParams.sort_direction = nextDirection;
        node.dataset.ga4SortDirection = nextDirection;

        if (tableId) {
          const table = document.getElementById(tableId);
          if (table) {
            const body = table.querySelector('tbody');
            if (body) {
              const rows = Array.from(body.querySelectorAll('tr'));
              const sorted = rows.sort((a, b) => {
                const aValue = Number(a.dataset.sortOrder || 0);
                const bValue = Number(b.dataset.sortOrder || 0);
                return nextDirection === 'asc' ? aValue - bValue : bValue - aValue;
              });
              sorted.forEach((row) => body.appendChild(row));
            }
          }
        }
      }

      if (dynamicType === 'filter') {
        const filterId = node.dataset.ga4FilterId || 'filter';
        let value = '';
        let state = 'applied';

        if (node instanceof HTMLSelectElement) {
          value = node.value || 'all';
          state = value === 'all' ? 'cleared' : 'applied';
        } else if (node instanceof HTMLInputElement) {
          const checked = node.checked;
          value = node.value || node.dataset.ga4FilterValue || 'selection';
          state = checked ? 'applied' : 'cleared';
        } else {
          value = node.dataset.ga4FilterValue || 'selection';
          const currentState = node.dataset.ga4FilterState === 'active';
          const nextState = !currentState;
          node.dataset.ga4FilterState = nextState ? 'active' : 'inactive';
          state = nextState ? 'applied' : 'cleared';
        }

        nextParams.filter_id = filterId;
        nextParams.filter_value = value;
        nextParams.filter_state = state;

        if (node.dataset.ga4SlotLabel) {
          nextParams.slot_label = nextParams.slot_label || node.dataset.ga4SlotLabel;
        }

        const tableId = node.dataset.ga4FilterTable;
        if (tableId) {
          const table = document.getElementById(tableId);
          if (table) {
            const rows = table.querySelectorAll('tbody tr');
            rows.forEach((row) => {
              const status = row.dataset.status || '';
              const shouldShow = value === 'all' || status === value;
              row.hidden = !shouldShow;
            });
          }
        }
      }

      if (dynamicType === 'inline') {
        const input = node.querySelector('[data-inline-value]') || node.querySelector('input, textarea');
        const rawValue = input ? input.value.trim() : '';
        const field = node.dataset.ga4InlineField || (input ? input.getAttribute('name') : null) || 'field';
        nextParams.field_name = field;
        nextParams.field_value = rawValue || 'empty';
        nextParams.update_action = rawValue ? 'submitted' : 'cleared';

        const targetId = node.dataset.ga4InlineTarget;
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target && rawValue) {
            target.textContent = rawValue;
          }
        }
      }

      if (dynamicType === 'date') {
        const rawValue = node.value || node.getAttribute('value') || '';
        if (rawValue) {
          nextParams.selected_date = rawValue;
        } else {
          const today = new Date().toISOString().split('T')[0];
          nextParams.selected_date = today;
        }
      }

      if (dynamicType === 'range') {
        const value = Number(node.value || node.getAttribute('value') || 0);
        const min = Number(node.min || 0);
        const max = Number(node.max || 100);
        const denominator = max - min || 1;
        const percent = Math.round(((value - min) / denominator) * 100);
        nextParams.control_value = value;
        nextParams.control_percent = percent;

        const targetId = node.dataset.ga4RangeTarget;
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target) {
            target.textContent = `${value}%`;
          }
        }
      }

      if (dynamicType === 'color') {
        const hex = (node.value || '#000000').toUpperCase();
        nextParams.color_value = hex;

        const targetId = node.dataset.ga4ColorTarget;
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target) {
            target.style.setProperty('--swatch-color', hex);
            target.style.backgroundColor = hex;
          }
        }
      }

      if (dynamicType === 'network') {
        const current = node.dataset.ga4NetworkState || (navigator.onLine ? 'online' : 'offline');
        const nextState = current === 'online' ? 'offline' : 'online';
        node.dataset.ga4NetworkState = nextState;
        nextParams.network_state = nextState;
        nextParams.previous_state = current;

        const targetId = node.dataset.ga4NetworkTarget;
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target) {
            target.textContent = nextState.charAt(0).toUpperCase() + nextState.slice(1);
          }
        }
      }

      if (dynamicType === 'fullscreen') {
        const currentState = node.dataset.ga4ScreenState || 'windowed';
        const nextState = currentState === 'immersive' ? 'windowed' : 'immersive';
        node.dataset.ga4ScreenState = nextState;
        nextParams.screen_state = nextState;
        nextParams.previous_state = currentState;

        const targetId = node.dataset.ga4ScreenTarget;
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target) {
            target.classList.toggle('tracked-screen--immersive', nextState === 'immersive');
          }
        }
      }

      if (dynamicType === 'orientation') {
        const currentState = node.dataset.ga4OrientationState || 'landscape';
        const nextState = currentState === 'landscape' ? 'portrait' : 'landscape';
        node.dataset.ga4OrientationState = nextState;
        nextParams.orientation_state = nextState;
        nextParams.previous_state = currentState;

        const targetId = node.dataset.ga4OrientationTarget;
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target) {
            target.dataset.orientation = nextState;
            target.classList.toggle('tracked-screen--portrait', nextState === 'portrait');
          }
        }
      }

      if (dynamicType === 'geo') {
        const latitude = Number((Math.random() * 180 - 90).toFixed(4));
        const longitude = Number((Math.random() * 360 - 180).toFixed(4));
        const accuracy = Number((Math.random() * 50 + 5).toFixed(1));
        nextParams.latitude = latitude;
        nextParams.longitude = longitude;
        nextParams.accuracy = accuracy;

        const targetId = node.dataset.ga4GeoTarget;
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target) {
            target.textContent = `${latitude.toFixed(4)}, ${longitude.toFixed(4)} (±${accuracy}km)`;
          }
        }
      }

      if (dynamicType === 'pwa') {
        const currentState = node.dataset.ga4PwaState || 'dismissed';
        const nextState = currentState === 'accepted' ? 'dismissed' : 'accepted';
        node.dataset.ga4PwaState = nextState;
        nextParams.prompt_outcome = nextState;
      }

      if (dynamicType === 'permission') {
        const currentState = node.dataset.ga4PermissionState || 'default';
        const nextState = currentState === 'granted' ? 'denied' : 'granted';
        node.dataset.ga4PermissionState = nextState;
        nextParams.permission_state = nextState;
        nextParams.previous_state = currentState;
      }

      if (dynamicType === 'sync') {
        const currentCount = Number(node.dataset.ga4SyncCount || 0);
        const nextCount = currentCount + 1;
        node.dataset.ga4SyncCount = String(nextCount);
        nextParams.job_count = nextCount;
        nextParams.job_id = `sync-${Date.now().toString().slice(-5)}`;

        const targetId = node.dataset.ga4SyncTarget;
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target) {
            target.textContent = String(nextCount);
          }
        }
      }

      return nextParams;
    }

    function registerTrackable(node) {
      const trigger = node.dataset.ga4Trigger || (node instanceof HTMLFormElement ? 'submit' : 'click');
      if (trigger === 'observe') {
        return;
      }

      const eventName = node.dataset.ga4Event;
      if (!eventName) {
        return;
      }

      node.addEventListener(trigger, (event) => {
        if (trigger === 'click' || trigger === 'submit') {
          event.preventDefault();
        }

        let params = parseParams(node);
        params = applyDynamicParams(node, params, event);

        trackEvent(eventName, params);

        const timestamp = formatTimestamp();
        let feedbackMessage = `Event "${eventName}" recorded at ${timestamp}.`;

        if (node.dataset.ga4ModalTarget) {
          const modal = findModal(node.dataset.ga4ModalTarget);
          openModal(modal, node);
          feedbackMessage = `Modal opened at ${timestamp}.`;
        }

        if (node.dataset.ga4ModalClose === 'true') {
          const modal = node.closest('[data-modal]');
          closeModal(modal);
          const action = eventName.replace('modal_', '').replace('_', ' ');
          feedbackMessage = `Modal ${action} at ${timestamp}.`;
        }

        if (node.dataset.ga4CopyText) {
          const text = node.dataset.ga4CopyText;
          if (navigator.clipboard && typeof navigator.clipboard.writeText === 'function') {
            navigator.clipboard.writeText(text).catch(() => {});
          }
          feedbackMessage = `Copied ${text} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'tooltip') {
          const state = params.interaction_state || 'toggled';
          feedbackMessage = `Tooltip ${state} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'accordion') {
          const state = params.interaction_state || 'toggled';
          feedbackMessage = `Accordion ${state} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'toggle') {
          const nextState = params.toggle_state || 'updated';
          feedbackMessage = `Theme set to ${nextState} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'step') {
          const stepNumber = params.step_number || 1;
          const total = params.step_count || tutorialBaseParams.step_count;
          const label = params.step_label || 'Step';
          feedbackMessage = `${label} logged (step ${stepNumber}/${total}) at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'drag') {
          const source = params.drag_source_label || 'Payload';
          feedbackMessage = `${source} delivered at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'file') {
          const count = params.file_count || 0;
          const summary = count === 1 ? '1 file' : `${count} files`;
          feedbackMessage = count ? `${summary} staged at ${timestamp}.` : `No files selected at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'hotkey') {
          const combo = params.hotkey_combination || 'Shortcut';
          feedbackMessage = `${combo} logged at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'focus') {
          const field = params.focus_target || 'Field';
          feedbackMessage = `${field} focus captured at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'sort') {
          const field = params.sort_field || 'Column';
          const direction = (params.sort_direction || '').toString().toUpperCase();
          feedbackMessage = `${field} sorted ${direction || 'ASC'} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'filter') {
          const value = params.filter_value || 'all';
          const state = params.filter_state || 'applied';
          const slotLabel = node.dataset.ga4SlotLabel || params.slot_label;
          if (slotLabel) {
            feedbackMessage = `${slotLabel} ${state} at ${timestamp}.`;
          } else {
            feedbackMessage = `Filter ${value} ${state} at ${timestamp}.`;
          }
        }

        if (node.dataset.ga4Dynamic === 'inline') {
          const field = params.field_name || 'Field';
          const value = params.field_value || 'empty';
          feedbackMessage = `${field} updated to ${value} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'date') {
          const date = params.selected_date || node.value || 'unspecified date';
          feedbackMessage = `Launch window set to ${date} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'range') {
          const value =
            typeof params.control_value === 'number'
              ? params.control_value
              : typeof params.control_percent === 'number'
              ? params.control_percent
              : 0;
          feedbackMessage = `Dial tuned to ${value}% at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'color') {
          const color = params.color_value || '#000000';
          feedbackMessage = `Accent set to ${color} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'network') {
          const state = params.network_state || 'unknown';
          feedbackMessage = `Network ${state} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'fullscreen') {
          const state = params.screen_state || 'windowed';
          feedbackMessage = `Screen mode ${state} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'orientation') {
          const state = params.orientation_state || 'landscape';
          feedbackMessage = `Orientation locked to ${state} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'geo') {
          const lat = params.latitude;
          const lng = params.longitude;
          const hasCoords = typeof lat === 'number' && typeof lng === 'number';
          feedbackMessage = hasCoords
            ? `Coordinates ${lat.toFixed(4)}, ${lng.toFixed(4)} logged at ${timestamp}.`
            : `Geolocation sampled at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'pwa') {
          const outcome = params.prompt_outcome || 'dismissed';
          feedbackMessage = `Install prompt ${outcome} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'permission') {
          const state = params.permission_state || 'default';
          feedbackMessage = `Push permission ${state} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'sync') {
          const count = params.job_count || 0;
          feedbackMessage = `Sync queue length ${count} at ${timestamp}.`;
        }

        if (node.dataset.ga4Dynamic === 'status') {
          const status = params.annotation_status || 'updated';
          feedbackMessage = `Annotation marked ${status} at ${timestamp}.`;
        }

        updateFeedback(node, feedbackMessage);

        if (node instanceof HTMLFormElement && trigger === 'submit') {
          node.reset();
        }

        if (node instanceof HTMLInputElement && node.type === 'file' && trigger === 'change') {
          node.value = '';
        }
      });
    }

    document.querySelectorAll('[data-ga4-event]').forEach((node) => {
      registerTrackable(node);
    });

    document.querySelectorAll('[data-ga4-drag-source]').forEach((source) => {
      source.addEventListener('dragstart', (event) => {
        activeDragPayload = {
          id: source.dataset.ga4DragSource || source.id || 'drag-source',
          label: source.dataset.ga4DragLabel || (source.textContent ? source.textContent.trim() : 'Payload'),
        };
        source.classList.add('tracked-drag__source--active');
        if (event.dataTransfer) {
          event.dataTransfer.setData('text/plain', activeDragPayload.label);
          event.dataTransfer.effectAllowed = 'move';
        }
      });

      source.addEventListener('dragend', () => {
        source.classList.remove('tracked-drag__source--active');
        activeDragPayload = null;
      });
    });

    document.querySelectorAll('[data-ga4-dynamic="drag"]').forEach((zone) => {
      zone.addEventListener('dragover', (event) => {
        event.preventDefault();
        zone.classList.add('tracked-dropzone--active');
        if (event.dataTransfer) {
          event.dataTransfer.dropEffect = 'move';
        }
      });

      zone.addEventListener('dragleave', () => {
        zone.classList.remove('tracked-dropzone--active');
      });

      zone.addEventListener('drop', (event) => {
        event.preventDefault();
        zone.classList.remove('tracked-dropzone--active');
      });
    });

    const hotkeyNodes = Array.from(document.querySelectorAll('[data-ga4-hotkey]'));
    if (hotkeyNodes.length) {
      const hotkeyConfigs = hotkeyNodes.map((node) => ({
        node,
        combos: (node.dataset.ga4Hotkey || '')
          .split(',')
          .map((combo) => combo.trim())
          .filter(Boolean)
          .map((combo) => parseHotkeyCombo(combo)),
      }));

      document.addEventListener('keydown', (event) => {
        if (event.repeat) {
          return;
        }
        hotkeyConfigs.forEach(({ node, combos }) => {
          if (!combos.length) {
            return;
          }
          const match = combos.some((combo) => matchesHotkey(event, combo));
          if (!match) {
            return;
          }

          const eventName = node.dataset.ga4Event;
          if (!eventName) {
            return;
          }

          event.preventDefault();
          let params = parseParams(node);
          params = applyDynamicParams(node, params, event);
          trackEvent(eventName, params);
          const timestamp = formatTimestamp();
          const combo = params.hotkey_combination || 'Shortcut';
          updateFeedback(node, `${combo} logged at ${timestamp}.`);
        });
      });
    }

    document.querySelectorAll('[data-modal]').forEach((modal) => {
      modal.addEventListener('click', (event) => {
        if (event.target === modal) {
          closeModal(modal);
          const feedbackId = modal.dataset.modalFeedback;
          if (feedbackId) {
            updateFeedback(feedbackId, `Modal dismissed at ${formatTimestamp()}.`);
          }
        }
      });
    });

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && activeModal) {
        const modal = activeModal;
        closeModal(modal);
        if (modal && modal.dataset.modalFeedback) {
          updateFeedback(modal.dataset.modalFeedback, `Modal dismissed via Escape at ${formatTimestamp()}.`);
        }
      }
    });

    const scrollSentinel = document.querySelector('[data-ga4-scroll]');
    if (scrollSentinel) {
      const sentinelEvent = scrollSentinel.dataset.ga4Event || 'scroll';
      const sentinelParams = parseParams(scrollSentinel);
      const observer = new IntersectionObserver(
        (entries, obs) => {
          const visible = entries.some((entry) => entry.isIntersecting);
          if (visible) {
            trackEvent(sentinelEvent, Object.assign({ trigger: 'sentinel' }, sentinelParams));
            obs.unobserve(scrollSentinel);
            scrollSentinel.classList.add('scroll-sentinel--armed');
          }
        },
        { threshold: 1 }
      );

      observer.observe(scrollSentinel);
    }
  </script>

  <style>
    .ga4-sandbox .playground-copy,
    .ga4-sandbox .console-copy {
      margin-top: 0;
      color: var(--color-muted);
    }

    .ga4-sandbox .tracked-card {
      background: rgba(255, 255, 255, 0.5);
    }

    .ga4-sandbox .tracked-definition {
      margin: 0;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: var(--space-2);
    }

    .ga4-sandbox .tracked-group {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
      padding-top: var(--space-2);
    }

    .ga4-sandbox .tracked-group + .tracked-group {
      border-top: 1px solid var(--rule-alpha-60);
      border-top: 1px solid color-mix(in srgb, var(--color-rule) 60%, transparent);
      padding-top: var(--space-3);
      margin-top: var(--space-3);
    }

    .ga4-sandbox .tracked-group__title {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      font-size: var(--text-16);
    }

    .ga4-sandbox .tracked-group__intro {
      margin: 0;
      color: var(--color-muted);
      max-width: 68ch;
    }

    .ga4-sandbox .tracked-grid {
      display: grid;
      gap: var(--space-3);
      grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    }

    .ga4-sandbox .tracked-tabs {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-2);
    }

    .ga4-sandbox .tracked-tabs [role='tab'][aria-pressed='true'] {
      background: var(--color-text);
      color: var(--color-bg);
    }

    .ga4-sandbox .tracked-video-controls {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-2);
    }

    .ga4-sandbox .tracked-timeslots {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-2);
    }

    .ga4-sandbox .timeline-slider {
      width: 100%;
      accent-color: var(--color-text);
    }

    .ga4-sandbox .sandbox-calendar {
      max-width: 220px;
    }

    .ga4-sandbox .tracked-nav {
      display: flex;
      gap: var(--space-2);
    }

    .ga4-sandbox .rating-control,
    .ga4-sandbox .consent-control {
      gap: var(--space-1);
    }

    .ga4-sandbox .rating-control span,
    .ga4-sandbox .consent-control span {
      font-family: var(--font-mono);
      text-transform: uppercase;
      letter-spacing: 0.12em;
      font-size: var(--text-12);
    }

    .ga4-sandbox .rating-control input[type='range'] {
      accent-color: var(--color-text);
    }

    .ga4-sandbox .scroll-instruction {
      display: grid;
      gap: var(--space-2);
    }

    .ga4-sandbox .scroll-sentinel {
      border: 1px dashed var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(0, 0, 0, 0.04);
      font-family: var(--font-mono);
      font-size: var(--text-12);
      letter-spacing: 0.08em;
      text-transform: uppercase;
    }

    .ga4-sandbox .scroll-sentinel--armed {
      border-style: solid;
      background: rgba(126, 37, 34, 0.12);
    }

    .ga4-sandbox .tracked-status {
      margin: 0;
      font-size: var(--text-12);
      color: var(--color-muted);
    }

    .ga4-sandbox .tracked-accordion {
      margin-top: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.55);
      display: grid;
      gap: var(--space-1);
    }

    .ga4-sandbox .sandbox-action--icon {
      display: inline-flex;
      align-items: center;
      gap: var(--space-1);
    }

    .ga4-sandbox .tracked-tooltip {
      margin-top: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(0, 0, 0, 0.04);
    }

    .ga4-sandbox .tracked-theme {
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.85);
      transition: background 0.2s ease, color 0.2s ease;
    }

    .ga4-sandbox .tracked-theme--dark {
      background: #181818;
      color: #f3eddf;
    }

    .ga4-sandbox .tracked-theme__label {
      margin: 0;
      font-family: var(--font-mono);
      letter-spacing: 0.08em;
      text-transform: uppercase;
    }

    .ga4-sandbox .tracked-stepper {
      display: grid;
      gap: var(--space-2);
    }

    .ga4-sandbox .tracked-stepper__list {
      margin: 0;
      padding-left: var(--space-3);
      display: grid;
      gap: var(--space-1);
    }

    .ga4-sandbox .tracked-stepper__item {
      position: relative;
      padding-left: var(--space-2);
    }

    .ga4-sandbox .tracked-stepper__item::before {
      content: '○';
      position: absolute;
      left: 0;
      font-family: var(--font-mono);
      color: var(--color-muted);
    }

    .ga4-sandbox .tracked-stepper__item--complete::before {
      content: '●';
      color: var(--color-text);
    }

    .ga4-sandbox .tracked-stepper__actions {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-2);
    }

    .ga4-sandbox .tracked-drag {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-2);
      align-items: stretch;
    }

    .ga4-sandbox .tracked-drag__source {
      flex: 1 1 160px;
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.85);
      cursor: grab;
      display: grid;
      gap: var(--space-1);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .ga4-sandbox .tracked-drag__source--active {
      transform: translateY(-2px);
      box-shadow: 0 12px 28px rgba(24, 24, 24, 0.18);
      cursor: grabbing;
    }

    .ga4-sandbox .tracked-drag__title {
      font-size: var(--text-12);
      letter-spacing: 0.12em;
      text-transform: uppercase;
      color: var(--color-muted);
    }

    .ga4-sandbox .tracked-dropzone {
      flex: 1 1 200px;
      border: 2px dashed var(--rule-alpha-80);
      border: 2px dashed color-mix(in srgb, var(--color-rule) 80%, transparent);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      font-family: var(--font-mono);
      font-size: var(--text-12);
      letter-spacing: 0.08em;
      text-transform: uppercase;
      background: rgba(0, 0, 0, 0.04);
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
      min-height: 104px;
      transition: border-color 0.2s ease, background 0.2s ease;
    }

    .ga4-sandbox .tracked-dropzone--active {
      border-style: solid;
      border-color: var(--mix-accent-rule-60);
      border-color: color-mix(in srgb, var(--color-accent) 60%, var(--color-rule));
      background: rgba(190, 133, 55, 0.15);
    }

    .ga4-sandbox .file-upload {
      gap: var(--space-1);
    }

    .ga4-sandbox .file-upload span {
      font-size: var(--text-12);
      letter-spacing: 0.12em;
      text-transform: uppercase;
      color: var(--color-muted);
    }

    .ga4-sandbox .file-upload input[type='file'] {
      padding: var(--space-1);
      border: 1px dashed var(--rule-alpha-70);
      border: 1px dashed color-mix(in srgb, var(--color-rule) 70%, transparent);
      border-radius: var(--radius-2);
      background: rgba(0, 0, 0, 0.02);
      cursor: pointer;
    }

    .ga4-sandbox .focus-capture input[type='text'] {
      padding: var(--space-1);
      border: 1px solid var(--rule-alpha-80);
      border: 1px solid color-mix(in srgb, var(--color-rule) 80%, transparent);
      border-radius: var(--radius-2);
      font-size: var(--text-16);
      background: rgba(255, 255, 255, 0.85);
      transition: border-color var(--transition-base), box-shadow var(--transition-base);
    }

    .ga4-sandbox .focus-capture input[type='text']:focus-visible {
      border-color: var(--mix-accent-rule-60);
      border-color: color-mix(in srgb, var(--color-accent) 60%, var(--color-rule));
      box-shadow: 0 0 0 4px var(--accent-shadow-12);
      box-shadow: 0 0 0 4px color-mix(in srgb, var(--color-accent) 12%, transparent);
    }

    .ga4-sandbox .hotkey-instruction {
      display: inline-flex;
      align-items: center;
      gap: var(--space-2);
      border: 1px solid var(--rule-alpha-80);
      border: 1px solid color-mix(in srgb, var(--color-rule) 80%, transparent);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(255, 255, 255, 0.75);
    }

    .ga4-sandbox .hotkey-badge {
      padding: calc(var(--space-1) * 0.5) var(--space-1);
      border: 1px solid var(--rule-alpha-70);
      border: 1px solid color-mix(in srgb, var(--color-rule) 70%, transparent);
      border-radius: var(--radius-1);
      background: rgba(0, 0, 0, 0.04);
      font-size: var(--text-12);
      letter-spacing: 0.12em;
      text-transform: uppercase;
    }

    .ga4-sandbox .hotkey-instruction__caption {
      margin: 0;
      font-size: var(--text-12);
      letter-spacing: 0.08em;
      text-transform: uppercase;
      color: var(--color-muted);
    }


    .ga4-sandbox .sandbox-modal {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: var(--space-4);
      z-index: 30;
    }

    .ga4-sandbox .sandbox-modal[hidden] {
      display: none;
    }

    .ga4-sandbox .sandbox-modal__dialog {
      background: var(--color-bg);
      color: var(--color-text);
      border-radius: var(--radius-2);
      border: 1px solid var(--color-rule);
      max-width: 420px;
      width: 100%;
      padding: var(--space-3);
      display: grid;
      gap: var(--space-2);
      box-shadow: 0 16px 40px rgba(0, 0, 0, 0.24);
    }

    .ga4-sandbox .sandbox-modal__header h2 {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      font-size: var(--text-16);
    }

    .ga4-sandbox .sandbox-modal__actions {
      display: flex;
      gap: var(--space-2);
      justify-content: flex-end;
      flex-wrap: wrap;
    }
  </style>
</Layout>
