---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/analytics-sandbox.css';
---
<Layout title="Unified Data Layer">
  <div class="analytics-sandbox udl-sandbox">
    <header class="sandbox-header hairline-bottom">
      <p class="supertitle mono">Analytics Lab / Instrumentation</p>
      <h1>Unified Data Layer Sandbox</h1>
      <p class="intro">
        Prototype a normalized event model that can power any analytics or marketing endpoint. Engage with
        the controls to observe the structured payloads delivered to <code>window.dataLayer</code>.
      </p>
      <dl class="sandbox-meta">
        <div>
          <dt>Schema</dt>
          <dd class="mono">unified-data-layer/v2</dd>
        </div>
        <div>
          <dt>Namespace</dt>
          <dd class="mono">lab.analytics.udl</dd>
        </div>
      </dl>
    </header>

    <div class="sandbox-grid">
      <section class="sandbox-panel">
        <section class="sandbox-card udl-context" aria-labelledby="udl-context-heading">
          <h2 id="udl-context-heading">Base context snapshot</h2>
          <p>
            Session, user, and page objects are seeded once per visit. Every interaction extends this payload
            so downstream tags inherit a shared vocabulary.
          </p>
          <div class="udl-context__grid">
            <article>
              <h3>Session</h3>
              <pre class="mono">{`{
  "id": "session-0042",
  "timestamp": "2024-01-01T12:00:00Z",
  "source": "organic"
}`}</pre>
            </article>
            <article>
              <h3>User</h3>
              <pre class="mono">{`{
  "auth_state": "anonymous",
  "persona": "analyst",
  "account_tier": "explorer"
}`}</pre>
            </article>
            <article>
              <h3>Page</h3>
              <pre class="mono">{`{
  "template": "lab-sandbox",
  "section": "analytics",
  "language": "en-US"
}`}</pre>
            </article>
          </div>
        </section>

        <section class="sandbox-card udl-interactions" aria-labelledby="udl-interactions-heading">
          <h2 id="udl-interactions-heading">Tracked interactions</h2>
          <p>
            Buttons, links, and forms declare their instrumentation through data attributes. A helper maps the
            DOM metadata into normalized payloads pushed into the data layer.
          </p>

          <div class="udl-interactions__section">
            <h3>Acquisition &amp; navigation</h3>
            <p class="udl-interactions__intro">Hero CTAs, navigation links, and internal search queries.</p>
            <div class="udl-interactions__grid">
              <button
                class="sandbox-action"
                data-udl-event="cta_click"
                data-udl-element="Launch Primary CTA"
                data-udl-module="udl-sandbox.cta"
                data-udl-value="primary"
                data-udl-metadata='{"placement":"hero","priority":"primary"}'
              >
                Initiate launch sequence
              </button>
              <a
                href="#"
                class="sandbox-link"
                data-udl-event="documentation_open"
                data-udl-element="Sandbox Documentation Link"
                data-udl-module="udl-sandbox.navigation"
                data-udl-prevent-default="true"
                data-udl-metadata='{"destination":"/docs/implementation","link_type":"supporting"}'
              >
                View implementation checklist
              </a>
              <form
                class="sandbox-form"
                data-udl-event="search_execute"
                data-udl-element="Knowledge Base Search"
                data-udl-module="udl-sandbox.search"
                data-udl-trigger="submit"
                data-udl-metadata='{"search_type":"site","results_returned":12}'
              >
                <label for="udl-search">Search query</label>
                <input id="udl-search" name="search_query" placeholder="Telemetry protocols" required />
                <button type="submit" class="sandbox-action">Run search</button>
              </form>
            </div>
          </div>

          <div class="udl-interactions__section">
            <h3>Media &amp; documents</h3>
            <p class="udl-interactions__intro">Video milestones and download tracking for resource hubs.</p>
            <div class="udl-interactions__grid">
              <button
                class="sandbox-action"
                data-udl-event="media_start"
                data-udl-element="Mission Briefing Video"
                data-udl-module="udl-sandbox.media"
                data-udl-metadata='{"media_type":"video","media_title":"Mission Brief 01","position":"hero"}'
              >
                Start mission briefing
              </button>
              <button
                class="sandbox-action"
                data-udl-event="media_milestone"
                data-udl-element="Mission Briefing Video"
                data-udl-module="udl-sandbox.media"
                data-udl-metadata='{"media_type":"video","media_title":"Mission Brief 01","percent":50}'
              >
                Log 50% milestone
              </button>
              <a
                href="#"
                class="sandbox-link"
                data-udl-event="asset_download"
                data-udl-element="Telemetry Specification PDF"
                data-udl-module="udl-sandbox.downloads"
                data-udl-prevent-default="true"
                data-udl-metadata='{"file_name":"mission-telemetry-kit.pdf","file_size":2480,"file_type":"pdf"}'
              >
                Download telemetry kit (PDF)
              </a>
            </div>
          </div>

          <div class="udl-interactions__section">
            <h3>Commerce &amp; pipeline</h3>
            <p class="udl-interactions__intro">Add to cart through purchase confirmation using shared product IDs.</p>
            <div class="udl-interactions__grid">
              <button
                class="sandbox-action"
                data-udl-event="commerce_add"
                data-udl-element="Telemetry Kit"
                data-udl-module="udl-sandbox.commerce"
                data-udl-metadata='{"sku":"telemetry-kit","value":199,"currency":"USD"}'
              >
                Add telemetry kit
              </button>
              <button
                class="sandbox-action"
                data-udl-event="commerce_checkout"
                data-udl-element="Telemetry Kit"
                data-udl-module="udl-sandbox.commerce"
                data-udl-metadata='{"sku":"telemetry-kit","step":1,"value":199,"currency":"USD"}'
              >
                Begin secure checkout
              </button>
              <button
                class="sandbox-action"
                data-udl-event="commerce_purchase"
                data-udl-element="Telemetry Kit"
                data-udl-module="udl-sandbox.commerce"
                data-udl-metadata='{"sku":"telemetry-kit","order_id":"UDL-DEMO-001","value":199,"currency":"USD"}'
              >
                Confirm purchase
              </button>
            </div>
          </div>

          <div class="udl-interactions__section">
            <h3>Experience signals</h3>
            <p class="udl-interactions__intro">Feedback loops that monitor quality, consent, and reliability.</p>
            <div class="udl-interactions__grid">
              <label class="udl-rating">
                <span>Module clarity score</span>
                <input
                  type="range"
                  min="1"
                  max="5"
                  value="3"
                  data-udl-event="content_rate"
                  data-udl-element="Analytics Module"
                  data-udl-module="udl-sandbox.feedback"
                  data-udl-trigger="change"
                  data-udl-dynamic="range"
                  data-udl-metadata='{"scale_max":5}'
                />
              </label>
              <label class="udl-toggle">
                <input
                  type="checkbox"
                  checked
                  data-udl-event="consent_update"
                  data-udl-element="Mission Communications Opt-in"
                  data-udl-module="udl-sandbox.consent"
                  data-udl-trigger="change"
                  data-udl-dynamic="toggle"
                  data-udl-metadata='{"consent_channel":"email"}'
                />
                <span>Email mission updates</span>
              </label>
              <button
                class="sandbox-action"
                data-udl-event="exception_raise"
                data-udl-element="Telemetry Feed"
                data-udl-module="udl-sandbox.reliability"
                data-udl-metadata='{"exception_code":"telemetry-timeout","severity":"warning"}'
              >
                Simulate timeout exception
              </button>
            </div>
          </div>
        </section>
      </section>

      <aside class="sandbox-console udl-console" data-console-panel aria-labelledby="udl-console-heading">
        <h2 id="udl-console-heading">Data layer stream</h2>
        <p>
          Shows the most recent <code>dataLayer.push</code> operations. Newest entries appear first.
        </p>
        <div class="sandbox-console__toolbar" role="group" aria-label="Data layer console controls">
          <button type="button" class="console-control" data-console-scroll disabled>Jump to latest</button>
          <button type="button" class="console-control" data-console-clear disabled>Clear console</button>
        </div>
        <div
          class="console-stream"
          data-console-stream
          aria-live="polite"
          role="log"
          tabindex="0"
        >
          <p class="console-empty" data-console-empty>No events yet. Trigger an interaction to populate the stream.</p>
        </div>
      </aside>
    </div>

    <section class="sandbox-snippet" aria-labelledby="udl-snippet-heading">
      <h2 id="udl-snippet-heading">Bootstrap snippet</h2>
      <p>
        Initialize the data layer early and push the session, user, and page context before registering
        interaction handlers.
      </p>
      <pre class="mono"><code>{`&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  window.dataLayer.push({
    schema: 'unified-data-layer/v2',
    session: {/* ... */},
    user: {/* ... */},
    page: {/* ... */}
  });
&lt;/script&gt;`}</code></pre>
    </section>
  </div>

  <script>
    window.dataLayer = window.dataLayer || [];

    function createSandboxConsole({ limit = 8 } = {}) {
      const panel = document.querySelector('[data-console-panel]');
      const stream = panel ? panel.querySelector('[data-console-stream]') : null;
      const empty = stream ? stream.querySelector('[data-console-empty]') : null;
      const clearButton = panel ? panel.querySelector('[data-console-clear]') : null;
      const scrollButton = panel ? panel.querySelector('[data-console-scroll]') : null;

      if (!panel || !stream) {
        return null;
      }

      const hideEmpty = () => {
        if (empty) {
          empty.hidden = true;
        }
      };

      const showEmpty = () => {
        if (empty) {
          empty.hidden = false;
        }
      };

      const updateControls = () => {
        const hasEntries = !!stream.querySelector('.console-entry');
        if (clearButton) {
          clearButton.disabled = !hasEntries;
        }
        if (scrollButton) {
          scrollButton.disabled = !hasEntries;
        }
      };

      const focusPanel = () => {
        const rect = panel.getBoundingClientRect();
        const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
        if (!fullyVisible) {
          panel.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      };

      if (clearButton) {
        clearButton.addEventListener('click', () => {
          stream.querySelectorAll('.console-entry').forEach((entry) => entry.remove());
          showEmpty();
          updateControls();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
          if (typeof stream.focus === 'function') {
            stream.focus();
          }
        });
      }

      if (scrollButton) {
        scrollButton.addEventListener('click', () => {
          focusPanel();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
        });
      }

      updateControls();

      return {
        append(entry) {
          hideEmpty();
          entry.classList.add('console-entry--recent');
          entry.addEventListener(
            'animationend',
            () => entry.classList.remove('console-entry--recent'),
            { once: true }
          );
          stream.prepend(entry);
          const entries = Array.from(stream.querySelectorAll('.console-entry'));
          if (limit && entries.length > limit) {
            entries.slice(limit).forEach((oldEntry) => oldEntry.remove());
          }
          updateControls();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
          focusPanel();
        }
      };
    }

    const consoleUI = createSandboxConsole({ limit: 8 });

    const baseContext = {
      schema: 'unified-data-layer/v2',
      session: {
        id: 'session-' + Math.random().toString(36).slice(2, 10),
        timestamp: new Date().toISOString(),
        source: 'direct',
      },
      user: {
        auth_state: 'anonymous',
        persona: 'visitor',
        account_tier: 'explorer',
      },
      page: {
        template: 'lab-sandbox',
        section: 'analytics',
        language: document.documentElement.lang || 'en-US',
      },
    };

    const pushToDataLayer = (payload) => {
      window.dataLayer.push(payload);
      if (!consoleUI) return;

      const entry = document.createElement('article');
      entry.className = 'console-entry';
      entry.innerHTML = `
        <header class="console-entry__meta">
          <span class="console-entry__method">dataLayer.push</span>
          <span>${payload.event}</span>
          <span>${new Date().toLocaleTimeString()}</span>
        </header>
        <pre class="console-entry__body">${JSON.stringify(payload, null, 2)}</pre>
      `;
      consoleUI.append(entry);
    };

    const buildInteractionPayload = (element) => {
      const eventName = element.dataset.udlEvent;
      const module = element.dataset.udlModule || 'udl-sandbox.component';
      const el = element.dataset.udlElement || element.textContent?.trim() || element.tagName.toLowerCase();
      const value = element.dataset.udlValue || null;
      const trigger = element.dataset.udlTrigger || (element.tagName === 'FORM' ? 'submit' : 'click');

      const formValues = element.tagName === 'FORM'
        ? Object.fromEntries(new FormData(element).entries())
        : null;

      let detail = {};
      if (element.dataset.udlMetadata) {
        try {
          detail = JSON.parse(element.dataset.udlMetadata) || {};
        } catch (error) {
          detail = { parse_error: 'Unable to parse data-udl-metadata', raw: element.dataset.udlMetadata };
        }
      }

      const dynamicType = element.dataset.udlDynamic;
      if (dynamicType === 'range') {
        const numericValue = Number(element.value);
        detail = {
          ...detail,
          selected_value: Number.isFinite(numericValue) ? numericValue : element.value,
        };
      }

      if (dynamicType === 'toggle') {
        detail = {
          ...detail,
          consent_granted: element.checked,
        };
      }

      const basePayload = {
        event: eventName,
        schema: baseContext.schema,
        session: baseContext.session,
        user: baseContext.user,
        page: baseContext.page,
        interaction: {
          element: el,
          module,
          value,
          trigger,
          form_values: formValues,
        },
        detail: Object.keys(detail).length ? detail : null,
      };

      if (basePayload.detail === null) {
        delete basePayload.detail;
      }

      return basePayload;
    };

    const registerInteraction = (element) => {
      const preventDefault = element.dataset.udlPreventDefault === 'true';
      const trigger = element.dataset.udlTrigger || (element.tagName === 'FORM' ? 'submit' : 'click');

      element.addEventListener(trigger, (event) => {
        if (preventDefault || element.tagName === 'FORM') {
          event.preventDefault();
        }

        const payload = buildInteractionPayload(element);
        pushToDataLayer(payload);

        if (element.tagName === 'FORM') {
          element.reset();
        }
      });
    };

    document.querySelectorAll('[data-udl-event]').forEach(registerInteraction);

    pushToDataLayer({
      event: 'page_view',
      ...baseContext,
      interaction: {
        element: 'Unified Data Layer Sandbox',
        module: 'udl-sandbox.page',
        value: null,
        trigger: 'view',
        form_values: null,
      },
    });
  </script>

  <style>
    .udl-sandbox .udl-context__grid {
      display: grid;
      gap: var(--space-3);
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }

    .udl-sandbox .udl-context__grid article {
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      padding: var(--space-2);
      background: rgba(0, 0, 0, 0.04);
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
    }

    .udl-sandbox .udl-context__grid h3 {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
    }

    .udl-sandbox .udl-interactions__section {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
    }

    .udl-sandbox .udl-interactions__section + .udl-interactions__section {
      margin-top: var(--space-3);
      padding-top: var(--space-3);
      border-top: 1px solid var(--rule-alpha-60);
      border-top: 1px solid color-mix(in srgb, var(--color-rule) 60%, transparent);
    }

    .udl-sandbox .udl-interactions__section h3 {
      margin: 0;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      font-size: var(--text-16);
    }

    .udl-sandbox .udl-interactions__intro {
      margin: 0;
      color: var(--color-muted);
      max-width: 68ch;
    }

    .udl-sandbox .udl-interactions__grid {
      display: grid;
      gap: var(--space-3);
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      align-items: start;
    }

    .udl-sandbox .udl-interactions__grid .sandbox-form {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
    }

    .udl-sandbox .udl-rating {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
      font-family: var(--font-mono);
      letter-spacing: 0.08em;
      text-transform: uppercase;
      font-size: var(--text-12);
    }

    .udl-sandbox .udl-rating span {
      color: var(--color-muted);
    }

    .udl-sandbox .udl-rating input {
      width: 100%;
    }

    .udl-sandbox .udl-toggle {
      display: flex;
      align-items: center;
      gap: var(--space-2);
      font-family: var(--font-mono);
      font-size: var(--text-12);
      letter-spacing: 0.08em;
      text-transform: uppercase;
    }

    .udl-sandbox .udl-context__grid pre {
      margin: 0;
      font-size: var(--text-12);
      overflow-x: auto;
    }

    .udl-sandbox .udl-interactions__grid {
      display: grid;
      gap: var(--space-3);
    }
  </style>
</Layout>
