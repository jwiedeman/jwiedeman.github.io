---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/analytics-sandbox.css';
---
<Layout title="Meta Pixel Sandbox">
  <div class="container analytics-sandbox meta-sandbox">
    <header class="sandbox-header hairline-bottom">
      <p class="supertitle mono">Analytics Lab / Instrumentation</p>
      <h1>Meta Pixel Sandbox</h1>
      <p class="intro">
        Observe how Meta Pixel events bind to common interface elements. Trigger any interaction to inspect
        the exact payload that would reach Events Manager in a production deployment.
      </p>
      <dl class="sandbox-meta">
        <div>
          <dt>Pixel ID</dt>
          <dd class="mono">META-PIXEL-ID</dd>
        </div>
        <div>
          <dt>Test event code</dt>
          <dd class="mono">META-SANDBOX</dd>
        </div>
        <div>
          <dt>Endpoint</dt>
          <dd class="mono">https://graph.facebook.com/v18.0/&lt;pixel-id&gt;/events</dd>
        </div>
      </dl>
    </header>

    <div class="sandbox-grid">
      <section class="sandbox-panel meta-panel" aria-labelledby="meta-interface-heading">
        <h2 id="meta-interface-heading">Tracked interface elements</h2>
        <p>
          Each component below mirrors a production instrumentation pattern. Data attributes declare the
          <code>fbq('track')</code> call, action source, and payload blueprint.
        </p>

        <article class="sandbox-card meta-card" data-meta-card>
          <header>
            <p class="sandbox-card__tag mono" data-meta-call>fbq('track', 'LaunchCTA')</p>
            <h3>Primary call-to-action</h3>
          </header>
          <p>
            Simulates a mission-critical conversion button. Useful for validating revenue metadata before a
            high-intent launch.
          </p>
          <dl class="sandbox-card__meta">
            <div>
              <dt>Event</dt>
              <dd class="mono">LaunchCTA</dd>
            </div>
            <div>
              <dt>Interaction</dt>
              <dd class="mono">click</dd>
            </div>
            <div>
              <dt>Action source</dt>
              <dd class="mono">website</dd>
            </div>
          </dl>
          <button
            class="sandbox-action meta-action"
            data-meta-event="LaunchCTA"
            data-meta-interaction="click"
            data-meta-payload='{"component":"cta","cta_label":"Initiate Launch Sequence","priority":"primary","value":1250,"currency":"USD"}'
            data-meta-feedback="cta-status"
            type="button"
          >
            Initiate launch sequence
          </button>
          <p id="cta-status" class="meta-status">Idle — waiting for interaction.</p>
          <details>
            <summary class="mono">Payload blueprint</summary>
            <pre class="meta-pre" data-meta-payload-preview></pre>
          </details>
        </article>

        <article class="sandbox-card meta-card" data-meta-card>
          <header>
            <p class="sandbox-card__tag mono" data-meta-call>fbq('track', 'ViewSpecifications')</p>
            <h3>Specification link</h3>
          </header>
          <p>
            Represents a mid-funnel content click. The payload records link context and document
            classification for downstream attribution.
          </p>
          <dl class="sandbox-card__meta">
            <div>
              <dt>Event</dt>
              <dd class="mono">ViewSpecifications</dd>
            </div>
            <div>
              <dt>Interaction</dt>
              <dd class="mono">click</dd>
            </div>
            <div>
              <dt>Prevent default</dt>
              <dd class="mono">true (demo only)</dd>
            </div>
          </dl>
          <a
            href="#"
            class="sandbox-link meta-action meta-action--link"
            data-meta-event="ViewSpecifications"
            data-meta-interaction="click"
            data-meta-prevent-default="true"
            data-meta-payload='{"component":"document_link","destination":"mission-brief.pdf","content_category":"mission-overview","position":2}'
            data-meta-feedback="link-status"
          >
            Download mission brief (PDF)
          </a>
          <p id="link-status" class="meta-status">Idle — waiting for interaction.</p>
          <details>
            <summary class="mono">Payload blueprint</summary>
            <pre class="meta-pre" data-meta-payload-preview></pre>
          </details>
        </article>

        <article class="sandbox-card meta-card" data-meta-card>
          <header>
            <p class="sandbox-card__tag mono" data-meta-call>fbq('track', 'LeadSubmission')</p>
            <h3>Qualified lead form</h3>
          </header>
          <p>
            Mimics a short lead capture flow with hashed identifiers. Submission is intercepted so you can
            review the outbound payload without leaving the page.
          </p>
          <dl class="sandbox-card__meta">
            <div>
              <dt>Event</dt>
              <dd class="mono">LeadSubmission</dd>
            </div>
            <div>
              <dt>Interaction</dt>
              <dd class="mono">submit</dd>
            </div>
            <div>
              <dt>Identifiers</dt>
              <dd class="mono">SHA-256 placeholders</dd>
            </div>
          </dl>
          <form
            class="sandbox-form meta-form meta-action"
            data-meta-event="LeadSubmission"
            data-meta-interaction="submit"
            data-meta-prevent-default="true"
            data-meta-payload='{"form_id":"lead-capture-sandbox","lead_type":"enterprise","advanced_matching":{"email":"4b825dc642cb6eb9a060e54bf8d69288","external_id":"9f5738f9c2d64f7fa2cb"}}'
            data-meta-feedback="form-status"
          >
            <label>
              Mission focus
              <select name="mission_focus">
                <option value="orbital">Orbital research</option>
                <option value="deep-space">Deep space comms</option>
                <option value="earth-observation">Earth observation</option>
              </select>
            </label>
            <label>
              Mission email (hashed)
              <input type="text" name="hashed_email" value="4b825dc642cb6eb9a060e54bf8d69288" readonly />
            </label>
            <button type="submit" class="sandbox-action">Transmit lead</button>
          </form>
          <p id="form-status" class="meta-status">Idle — waiting for interaction.</p>
          <details>
            <summary class="mono">Payload blueprint</summary>
            <pre class="meta-pre" data-meta-payload-preview></pre>
          </details>
        </article>
      </section>

      <aside class="sandbox-console meta-console" data-console-panel aria-labelledby="meta-console-heading">
        <h2 id="meta-console-heading">Mock transmission console</h2>
        <p>
          Displays the synthesized request body delivered to the Meta Events API. No network traffic leaves
          this sandbox.
        </p>
        <div class="sandbox-console__toolbar" role="group" aria-label="Meta console controls">
          <button type="button" class="console-control" data-console-scroll disabled>Jump to latest</button>
          <button type="button" class="console-control" data-console-clear disabled>Clear console</button>
        </div>
        <div
          class="console-stream"
          data-console-stream
          aria-live="polite"
          role="log"
          tabindex="0"
        >
          <p class="console-empty" data-console-empty>Awaiting transmissions. Trigger any element to populate this feed.</p>
        </div>
      </aside>
    </div>

    <section class="sandbox-snippet" aria-labelledby="meta-snippet-heading">
      <h2 id="meta-snippet-heading">Meta Pixel base snippet</h2>
      <p>
        Deploy the base pixel early in the document head. Replace <code>META-PIXEL-ID</code> with your pixel
        ID and add advanced matching parameters as needed.
      </p>
      <pre class="mono"><code>{`&lt;script&gt;
  !function(f,b,e,v,n,t,s){
    if(f.fbq) return;
    n=f.fbq=function(){ n.callMethod ?
      n.callMethod.apply(n,arguments) : n.queue.push(arguments);
    };
    if(!f._fbq) f._fbq=n;
    n.push=n; n.loaded=!0; n.version='2.0';
    n.queue=[]; t=b.createElement(e); t.async=!0;
    t.src=v; s=b.getElementsByTagName(e)[0];
    s.parentNode.insertBefore(t,s);
  }(window, document,'script','https://connect.facebook.net/en_US/fbevents.js');
  fbq('init', 'META-PIXEL-ID');
  fbq('track', 'PageView');
&lt;/script&gt;`}</code></pre>
    </section>
  </div>

  <script>
    const metaPixelId = 'META-PIXEL-ID';
    const metaEndpoint = `https://graph.facebook.com/v18.0/${metaPixelId}/events`;
    const testEventCode = 'META-SANDBOX';

    function createSandboxConsole({ limit = 8 } = {}) {
      const panel = document.querySelector('[data-console-panel]');
      const stream = panel ? panel.querySelector('[data-console-stream]') : null;
      const empty = stream ? stream.querySelector('[data-console-empty]') : null;
      const clearButton = panel ? panel.querySelector('[data-console-clear]') : null;
      const scrollButton = panel ? panel.querySelector('[data-console-scroll]') : null;

      if (!panel || !stream) {
        return null;
      }

      const hideEmpty = () => {
        if (empty) {
          empty.hidden = true;
        }
      };

      const showEmpty = () => {
        if (empty) {
          empty.hidden = false;
        }
      };

      const updateControls = () => {
        const hasEntries = !!stream.querySelector('.console-entry');
        if (clearButton) {
          clearButton.disabled = !hasEntries;
        }
        if (scrollButton) {
          scrollButton.disabled = !hasEntries;
        }
      };

      const focusPanel = () => {
        const rect = panel.getBoundingClientRect();
        const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
        if (!fullyVisible) {
          panel.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      };

      if (clearButton) {
        clearButton.addEventListener('click', () => {
          stream.querySelectorAll('.console-entry').forEach((entry) => entry.remove());
          showEmpty();
          updateControls();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
          if (typeof stream.focus === 'function') {
            stream.focus();
          }
        });
      }

      if (scrollButton) {
        scrollButton.addEventListener('click', () => {
          focusPanel();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
        });
      }

      updateControls();

      return {
        append(entry) {
          hideEmpty();
          entry.classList.add('console-entry--recent');
          entry.addEventListener(
            'animationend',
            () => entry.classList.remove('console-entry--recent'),
            { once: true }
          );
          stream.prepend(entry);
          const entries = Array.from(stream.querySelectorAll('.console-entry'));
          if (limit && entries.length > limit) {
            entries.slice(limit).forEach((oldEntry) => oldEntry.remove());
          }
          updateControls();
          if (typeof stream.scrollTo === 'function') {
            stream.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            stream.scrollTop = 0;
          }
          focusPanel();
        }
      };
    }

    const consoleUI = createSandboxConsole({ limit: 8 });

    const prettyJson = (value) => JSON.stringify(value, null, 2);

    const pushConsoleEntry = ({ method, label, body }) => {
      if (!consoleUI) {
        return;
      }
      const timestamp = new Date().toLocaleTimeString('en-US', { hour12: false });
      const entry = document.createElement('article');
      entry.className = 'console-entry';
      entry.innerHTML = `
        <header class="console-entry__meta">
          <span class="console-entry__method">${method}</span>
          <span>${label}</span>
          <span>${timestamp}</span>
        </header>
        <pre class="console-entry__body">${body}</pre>
      `;
      consoleUI.append(entry);
    };

    const fbq = (command, ...args) => {
      if (command === 'track') {
        const [eventName, parameters = {}] = args;
        const payload = {
          data: [
            {
              event_name: eventName,
              event_time: Math.floor(Date.now() / 1000),
              event_source_url: window.location.href,
              action_source: 'website',
              custom_data: parameters,
            },
          ],
          test_event_code: testEventCode,
        };

        pushConsoleEntry({
          method: 'POST',
          label: eventName,
          body: prettyJson({ method: 'POST', url: metaEndpoint, body: payload })
        });
      } else if (command === 'init') {
        const [pixelId, advancedMatching = {}] = args;
        pushConsoleEntry({
          method: "fbq('init')",
          label: 'Bootstrap',
          body: prettyJson({ pixelId, advancedMatching })
        });
      } else {
        pushConsoleEntry({
          method: `fbq('${command}')`,
          label: 'Meta pixel callback',
          body: prettyJson({ command, args })
        });
      }
    };

    fbq.loaded = true;
    fbq.version = '2.0';
    fbq.queue = [];
    window.fbq = fbq;
    window._fbq = fbq;

    const interactiveElements = document.querySelectorAll('[data-meta-event]');

    const applyPayloadPreview = (element, payload) => {
      const card = element.closest('[data-meta-card]');
      if (!card) return;
      const callLabel = card.querySelector('[data-meta-call]');
      if (callLabel) {
        callLabel.textContent = `fbq('track', '${element.dataset.metaEvent}', ${prettyJson(payload)})`;
      }
      const previewBlock = card.querySelector('[data-meta-payload-preview]');
      if (previewBlock) {
        previewBlock.textContent = prettyJson(payload);
      }
    };

    const registerInteraction = (element) => {
      const { metaEvent, metaInteraction, metaPreventDefault, metaFeedback } = element.dataset;
      let payload = {};
      try {
        payload = element.dataset.metaPayload ? JSON.parse(element.dataset.metaPayload) : {};
      } catch (error) {
        payload = { error: 'Failed to parse payload', raw: element.dataset.metaPayload };
      }

      applyPayloadPreview(element, payload);

      const interaction = metaInteraction || 'click';
      element.addEventListener(interaction, (event) => {
        if (metaPreventDefault === 'true') {
          event.preventDefault();
        }

        fbq('track', metaEvent, payload);

        element.classList.add('meta-action--fired');
        window.setTimeout(() => {
          element.classList.remove('meta-action--fired');
        }, 320);

        if (metaFeedback) {
          const feedbackNode = document.getElementById(metaFeedback);
          if (feedbackNode) {
            const firedAt = new Date().toLocaleTimeString('en-US', { hour12: false });
            feedbackNode.textContent = `Last fired at ${firedAt}`;
          }
        }
      });
    };

    interactiveElements.forEach(registerInteraction);

    fbq('init', metaPixelId, {
      external_id: 'sandbox-visitor-0021',
      email: 'a6f5c2f14bd54d90abca1b1c8b4123ff',
    });

    fbq('track', 'PageView', {
      page_section: 'meta_pixel_sandbox',
      environment: 'lab',
    });
  </script>

  <style>
    .meta-sandbox .meta-card details {
      border-top: 1px solid var(--color-rule);
      padding-top: var(--space-2);
    }

    .meta-sandbox .meta-status {
      font-size: var(--text-14);
      color: var(--color-muted);
      margin: 0;
    }

    .meta-sandbox .meta-pre {
      margin: 0;
      padding: var(--space-2);
      border: 1px solid var(--color-rule);
      border-radius: var(--radius-2);
      background: rgba(0, 0, 0, 0.04);
      font-size: var(--text-12);
      overflow-x: auto;
    }

    .meta-sandbox .meta-form select,
    .meta-sandbox .meta-form input {
      background: rgba(255, 255, 255, 0.85);
    }

    .meta-sandbox .meta-action--fired {
      box-shadow: 0 0 0 2px rgba(126, 37, 34, 0.25);
      transform: translateY(-1px);
    }
  </style>
</Layout>
