---
import '../styles/global.css';
import Nav from '../components/Nav.astro';
import Footer from '../components/Footer.astro';
import HeadingTracker from '../components/HeadingTracker.astro';

const {
  title: propTitle,
  description: propDescription,
  showNav = true,
  showFooter = true,
  frontmatter = {},
  headingTracker: headingTrackerProp,
} = Astro.props;

const title = propTitle ?? frontmatter.title ?? 'JWiedeman';
const description =
  propDescription ?? frontmatter.description ?? 'Interstellar web projects by Joshua Wiedeman.';

const rawSegments = Astro.url.pathname.split('/').filter(Boolean);

const formatSegment = (segment: string) => {
  const cleaned = decodeURIComponent(segment)
    .replace(/[-_]+/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();

  if (!cleaned) return '';

  return cleaned
    .split(' ')
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

const breadcrumbs = rawSegments
  .map((segment, index) => ({
    label: formatSegment(segment),
    href: `/${rawSegments.slice(0, index + 1).join('/')}`,
  }))
  .filter(({ label }) => label.length > 0);

const shouldShowBreadcrumbs = showNav && breadcrumbs.length > 0;

const normalizeTrackerConfig = (value: any) => {
  if (value === null || value === undefined) {
    return {};
  }
  if (typeof value === 'boolean') {
    return { enabled: value };
  }
  if (typeof value === 'object') {
    return value;
  }
  return {};
};

const path = Astro.url.pathname;
const isBlogArticle = path.startsWith('/blog/') && path !== '/blog';
const isLabPage = path.startsWith('/lab');

const defaultTrackerConfig = {
  enabled: isBlogArticle || isLabPage,
  containerClass: 'container',
  headingsSelector: 'h2, h3',
  topLabel: isBlogArticle ? 'Article index' : 'On this page',
  sideLabel: isLabPage ? 'Current module' : 'Current section',
  minHeadings: 2,
};

const trackerConfig = {
  ...defaultTrackerConfig,
  ...normalizeTrackerConfig(frontmatter.headingTracker),
  ...normalizeTrackerConfig(headingTrackerProp),
};

const trackerContentId = trackerConfig.contentId ?? 'tracked-content';
const showHeadingTracker = Boolean(trackerConfig.enabled);
---
<!DOCTYPE html>
<html lang="en" class="theme-light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <title>Welcome / {title}</title>
  </head>
  <body>
    {showNav && <Nav />}
    {shouldShowBreadcrumbs && (
      <nav class="slug-trail hairline-bottom" aria-label="Breadcrumb">
        <div class="container mono">
          <ol class="breadcrumb-list">
            {breadcrumbs.map((crumb, index) => (
              <li class="breadcrumb-item" key={crumb.href}>
                {index < breadcrumbs.length - 1 ? (
                  <a href={crumb.href}>{crumb.label}</a>
                ) : (
                  <span aria-current="page">{crumb.label}</span>
                )}
              </li>
            ))}
          </ol>
        </div>
      </nav>
    )}
    <main class:list={{ 'site-main': true, 'site-main--flush': !showNav }}>
      {showHeadingTracker ? (
        <HeadingTracker
          containerClass={trackerConfig.containerClass ?? ''}
          contentId={trackerContentId}
          headingsSelector={trackerConfig.headingsSelector ?? 'h2, h3'}
          topLabel={trackerConfig.topLabel ?? (isBlogArticle ? 'Article index' : 'On this page')}
          sideLabel={trackerConfig.sideLabel ?? (isLabPage ? 'Current module' : 'Current section')}
          minHeadings={Number(trackerConfig.minHeadings ?? 2)}
        >
          <slot />
        </HeadingTracker>
      ) : (
        <slot />
      )}
    </main>
    {showFooter && <Footer />}
  </body>
</html>
